# setwd("C:/Users/gngia/OneDrive/Documents/new obis")

install.pacakges("dplyr")
install.pacakges("robis")
install.pacakges("ggplot2")
install.pacakges("sf")
install.pacakges("worrms")
install.packages("remotes")
  remotes::install_github("IUCNN/IUCNN") # maybe not using this or rredlist
install.packages("rredlist")
install.pacakges("patchwork")
install.packages("formattable")
install.packages("kableExtra")
install.packages("openxlsx")
install.packages("units")
install.packages("viridis")
install.packages("cowplot")
install.packages("tidyverse")
install.packages("rJava")
install.packages("wicket")

library(dplyr)
library(ggplot2)
library(maps) # masked from 'package:viridis':
library(sf)
library(robis)
library(patchwork)
library(kableExtra)
library(worrms)


# Occurrence Data: WKT string delimits polygon excluding Svalbard and Jan Mayen; Norway = 179 (Accessed 23.02.2024)
library("dplyr")
library("ggplot2")
library("robis")
o <- occurrence(areaid = "179", mof = TRUE, geometry = "POLYGON ((34.4004 70.2535, 30.5332 71.2047, 26.5254 71.5416, 22.1660 71.2500,
           19.5645 70.7695, 16.5410 70.1344, 13.4473 69.0560, 11.1973 67.7361, 12.5332 67.3060, 
           11.4082 66.3939, 9.8613 65.4765, 8.4551 64.7666, 6.9785 63.9451, 5.0098 62.9072,
           3.5332 61.9968, 3.5332 58.3279, 7.2598 57.2790, 11.0567 58.4017, 12.4629 59.0948, 11.3379 60.6473,
           8.6660 60.5783, 8.3145 62.2924, 16.3301 65.6220, 17.2442 67.6293, 20.1973 68.7523,
           23.9238 69.6998, 26.5254 70.1344, 29.5488 69.5284, 32.2910 69.4051, 34.4004 70.2535))")

unique(o$kingdom)
View(o)
# Filter rows based on the specified conditions
filtered_data <- o %>%
  filter(kingdom %in% c("Animalia", "Plantae", "Chromista", NA))
View(filtered_data)

filtered_data1 <- filtered_data %>%
  filter(!(class == "Aves"))
View(filtered_data1)

# Plot filtered data
map_ggplot(filtered_data1, color = "blue")

library(sf)
# Transform to sf object and set crs (EPSG:4326, WGS84)
occ_sf <- st_as_sf(filtered_data1, coords = c("decimalLongitude", "decimalLatitude"))
occ_sf <- st_set_crs(occ_sf, "EPSG:4326")
print(occ_sf1 <- st_crs(occ_sf))
class(occ_sf)

# Read the shapefile into an sf object and set crs (EPSG:4326, WGS84)
shp <- st_read("C:/Users/gngia/OneDrive/Documents/new obis/GIS/Kommuner_Fylker_Intersect.shp", stringsAsFactors=FALSE)
shp <- st_transform(shp, crs = "EPSG:4326")
print(shp1 <- st_crs(shp))
View(shp)
class(shp) # Shape_Area is in meters

# Plot shapefile with occurrence data
ggplot() +
  geom_sf(data = shp) +
  geom_sf(data = occ_sf, color = "green", size = 1) +
  theme_bw()

# Read the shapefile into an sf object and set crs (EPSG:4326, WGS84)
# Shapefile clip with county, municipality, and is only territorial waters
shp2 <- st_read("C:/Users/gngia/OneDrive/Documents/new obis/GIS/new_Fylker_Int_Terrw.shp", stringsAsFactors=FALSE)
shp2 <- st_transform(shp2, crs = "EPSG:4326")
print(shp3 <- st_crs(shp2))
class(shp2)

print(shp2)

# Plot shapefile2 with occurrence data
ggplot() +
  geom_sf(data = shp2) +
  geom_sf(data = occ_sf, color = "pink", size = 1) +
  theme_bw()

# Perform a spatial join
map_occ_joined_clip1 <- st_join(occ_sf, shp2)
class(map_occ_joined_clip1)
View(map_occ_joined_clip1)

# Count the number of occurrences of each species within each county
map_occ__with_clip1 <- map_occ_joined_clip1 %>%
  group_by(FYLKESNAVN) %>%
  summarize(species_count = n_distinct(originalScientificName)) #I dont understand why this doesnt show species_count in the table / how map_occ_joined_clip2 has occurrences
View(map_occ_joined_clip1)

map_occ_joined_clip2 <- map_occ_joined_clip1 %>%
  group_by(FYLKESNAVN, aphiaID, originalScientificName, family, class, phylum, kingdom, area_fylk, basisOfRecord) %>%
  summarize(occurrences = n())
View(map_occ_joined_clip2)

sum(map_occ_joined_clip2$occurrences) # 563,741

# Plot the join
ggplot() +
  geom_sf(data = shp) +
  geom_sf(data = shp2) +
  geom_sf(data = map_occ_joined_clip2, aes(color = occurrences), size = 0.25) +
  theme_bw()

#Intersect joined data with shp2 (leaves only occurrences within 12nm of the coast)
intersect3 <- st_intersection(map_occ_joined_clip2, shp2)
View(intersect3)
class(intersect3) # sf, tbl_df, tbl, data.frame

sum(intersect3$occurrences) # 136,945

sum(intersect3$occurrences[intersect3$FYLKESNAVN == "Oslo"])

# Plot the intersection 
 g1 <- ggplot() +
  geom_sf(data = shp) +
  geom_sf(data = shp2, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect3, aes(color = occurrences), size = 1, fill = NA) +
  theme_bw()
 
 print(g1)

unique(intersect3$FYLKESNAVN)
# Unicode <- https://symbl.cc/en/unicode-table/#latin-1-supplement
#st_centroid returns the geometric center for a geometry

####################### TROMS #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_troms <- shp2[shp2$FYLKESNAVN == "\"Troms - Romsa - Tromssa\"", ]
intersect3_troms <- intersect3 %>%
  filter(FYLKESNAVN == "\"Troms - Romsa - Tromssa\"",)

# Extract x and y coordinates from geometry column
centroid_data1 <- st_centroid(shp2_troms)
centroid_data1 <- cbind(centroid_data1, st_coordinates(centroid_data1))

# Plot with labels
troms_map <-ggplot() +
  geom_sf(data = shp2_troms, color = "gray30", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_troms, aes(color = occurrences), size = 1, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Troms") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(troms_map)

####################### AKERSHUS #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_akershus <- shp2[shp2$FYLKESNAVN == "Akershus", ]
intersect3_akershus <- intersect3 %>%
  filter(FYLKESNAVN == "Akershus",)

# Extract x and y coordinates from geometry column
centroid_data2 <- st_centroid(shp2_akershus)
centroid_data2 <- cbind(centroid_data2, st_coordinates(centroid_data2))

# Plot with labels
akershus_map <- ggplot() +
  geom_sf(data = shp2_akershus, color = "gray30", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_akershus, aes(color = occurrences), size = 1, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Akershus") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(akershus_map)

####################### MØRE OG ROMSDAL #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_moere <- shp2[shp2$FYLKESNAVN == "\"M\u00F8re og Romsdal\"", ]
intersect3_moere <- intersect3 %>%
  filter(FYLKESNAVN == "\"M\u00F8re og Romsdal\"",)

# Extract x and y coordinates from geometry column
centroid_data3 <- st_centroid(shp2_moere)
centroid_data3 <- cbind(centroid_data3, st_coordinates(centroid_data3))

moere_map <- ggplot() +
  geom_sf(data = shp2_moere, color = "gray30", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_moere, aes(color = occurrences), size = 1, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("M\u00F8re og Romsdal") +
  theme_bw()+
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(moere_map)

####################### ØSTFOLD #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_oestfold <- shp2[shp2$FYLKESNAVN == "\u00D8stfold", ]
intersect3_oestfold <- intersect3 %>%
  filter(FYLKESNAVN == "\u00D8stfold",)

# Extract x and y coordinates from geometry column
centroid_data4 <- st_centroid(shp2_oestfold)
centroid_data4 <- cbind(centroid_data4, st_coordinates(centroid_data4))

oestfold_map <- ggplot() +
  geom_sf(data = shp2_oestfold, color = "gray30", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_oestfold, aes(color = occurrences), size = 1, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +
  ggtitle("\u00D8stfold") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(oestfold_map)

####################### VESTLAND #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_vestland <- shp2[shp2$FYLKESNAVN == "Vestland", ]
intersect3_vestland <- intersect3 %>%
  filter(FYLKESNAVN == "Vestland",)

# Extract x and y coordinates from geometry column
centroid_data5 <- st_centroid(shp2_vestland)
centroid_data5 <- cbind(centroid_data5, st_coordinates(centroid_data5))

# Plot with labels
vestland_map <- ggplot() +
  geom_sf(data = shp2_vestland, color = "gray30", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_vestland, aes(color = occurrences), size = 0.8, fill = NA) +
  scale_color_viridis(option = "magma", begin = 0.1, end = "0.8", direction = -1) +  # Adding color scale for points
  ggtitle("Vestland") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(vestland_map)

####################### NORDLAND #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_nordland <- shp2[shp2$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\"" , ]
intersect3_nordland <- intersect3 %>% filter(FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\"" , )

# Extract centroid coordinates from geometry column
centroid_data6 <- st_centroid(shp2_nordland)
centroid_data6 <- cbind(centroid_data6, st_coordinates(centroid_data6))

# Plot with labels
nordland_map <- ggplot() +
  geom_sf(data = shp2_nordland, color = "gray30", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_nordland, aes(color = occurrences), size = 1, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Nordland") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(nordland_map)

####################### ROGALAND #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_rogaland <- shp2[shp2$FYLKESNAVN == "Rogaland", ]
intersect3_rogaland <- intersect3 %>%
  filter(FYLKESNAVN == "Rogaland",)

# Extract x and y coordinates from geometry column
centroid_data7 <- st_centroid(shp2_rogaland)
centroid_data7 <- cbind(centroid_data7, st_coordinates(centroid_data7))

# Plot with labels
rogaland_map <- ggplot() +
  geom_sf(data = shp2_rogaland, color = "gray30", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_rogaland, aes(color = occurrences), size = 1, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Rogaland") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(rogaland_map)

####################### TRØNDELAG #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_troendelag <- shp2[shp2$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\"" , ]
intersect3_troendelag <- intersect3 %>%
  filter(FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\"")

# Extract x and y coordinates from geometry column
centroid_data8 <- st_centroid(shp2_troendelag)
centroid_data8 <- cbind(centroid_data8, st_coordinates(centroid_data8))

# Plot with labels
troendelag_map <- ggplot() +
  geom_sf(data = shp2_troendelag, color = "gray30", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_troendelag, aes(color = occurrences), size = 1.5, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Tr\u00F8ndelag") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(troendelag_map)

####################### FINNMARK #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_finnmark <- shp2[shp2$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\"", ]
intersect3_finnmark <- intersect3 %>%
  filter(FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\"",)

# Extract x and y coordinates from geometry column
centroid_data9 <- st_centroid(shp2_finnmark)
centroid_data9 <- cbind(centroid_data9, st_coordinates(centroid_data9))
# Plot with labels
finnmark_map <- ggplot() +
  geom_sf(data = shp2_finnmark, color = "gray30", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_finnmark, aes(color = occurrences), size = 1, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Finnmark") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(finnmark_map)

####################### AGDER #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_agder <- shp2[shp2$FYLKESNAVN == "Agder", ]
intersect3_agder <- intersect3 %>%
  filter(FYLKESNAVN == "Agder",)

# Extract x and y coordinates from geometry column
centroid_data10 <- st_centroid(shp2_agder)
centroid_data10 <- cbind(centroid_data10, st_coordinates(centroid_data10))

# Plot with labels
agder_map <- ggplot() +
  geom_sf(data = shp2_agder, color = "gray30", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_agder, aes(color = occurrences), size = 1, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Agder") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(agder_map)

####################### TELEMARK #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_telemark <- shp2[shp2$FYLKESNAVN == "Telemark", ]
intersect3_telemark <- intersect3 %>%
  filter(FYLKESNAVN == "Telemark",)

# Extract x and y coordinates from geometry column
centroid_data11 <- st_centroid(shp2_telemark)
centroid_data11 <- cbind(centroid_data11, st_coordinates(centroid_data11))

# Plot with labels
telemark_map <- ggplot() +
  geom_sf(data = shp2_telemark, color = "gray30", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_telemark, aes(color = occurrences), size = 1, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Telemark") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(telemark_map)

####################### VESTFOLD #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_vestfold <- shp2[shp2$FYLKESNAVN == "Vestfold", ]
intersect3_vestfold <- intersect3 %>%
  filter(FYLKESNAVN == "Vestfold",)

# Extract x and y coordinates from geometry column
centroid_data12 <- st_centroid(shp2_vestfold)
centroid_data12 <- cbind(centroid_data12, st_coordinates(centroid_data12))

# Plot with labels
vestfold_map <- ggplot() +
  geom_sf(data = shp2_vestfold, color = "gray30", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_vestfold, aes(color = occurrences), size = 1, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Vestfold") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(vestfold_map)

####################### BUSKERUD #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_buskerud <- shp2[shp2$FYLKESNAVN == "Buskerud", ]
intersect3_buskerud <- intersect3 %>%
  filter(FYLKESNAVN == "Buskerud",)


# Plot with labels
buskerud_map <- ggplot() +
  geom_sf(data = shp2_buskerud, color = "gray30", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_buskerud, aes(color = occurrences), size = 1, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Buskerud") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(buskerud_map)

####################### OSLO #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_oslo <- shp2[shp2$FYLKESNAVN == "Oslo", ]
intersect3_oslo <- intersect3 %>%
  filter(FYLKESNAVN == "Oslo",)

# Extract x and y coordinates from geometry column
centroid_data14 <- st_centroid(shp2_oslo)
centroid_data14 <- cbind(centroid_data14, st_coordinates(centroid_data14)) # since i took out the labeling, i can take out centroid

library(viridis) 
# Plot with labels
oslo_map <- ggplot() +
  geom_sf(data = shp2_oslo, color = "gray30", size = 0.2, fill = "lightblue1") +
  geom_sf(data = intersect3_oslo, aes(color = occurrences), size = 1.5, fill = NA) +
  scale_color_viridis(option = "plasma", begin = 0, end = 1, direction = -1) +  # Adding color scale for points
  ggtitle("Oslo") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "panel",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5)  # Center the title text
)

print(oslo_map)

print(intersect3_oslo$geometry)
print.table(intersect3_oslo$geometry)





7###### SIMEN KODD START #########################################################
# Load required libraries
library(sf)
library(dplyr)  # For data manipulation with pipes

# Assuming 'intersect3' and 'shp2' are your actual data frames

# Filter shp2 to include only the geometry for the county of interest (Oslo)
shp2_oslo <- shp2[shp2$FYLKESNAVN == "Oslo", ]

# Filter intersect3 to include only the data for Oslo
intersect3_oslo <- intersect3 %>%
  filter(FYLKESNAVN == "Oslo")

# Function to process multi-point geometry and return a vector of points
process_multipoint <- function(multipoint) {
  # Remove "MULTIPOINT" and parentheses
  points_str <- gsub("^MULTIPOINT\\(|\\)$", "", multipoint)
  # Split the string by commas to separate individual points
  points <- strsplit(points_str, ", ")[[1]]
  
  # Initialize a vector to store new points
  new_points <- character(length(points))
  
  # Iterate over each point string
  for (i in seq_along(points)) {
    # Extract x and y coordinates
    coords <- as.numeric(unlist(strsplit(points[i], " ")))
    x <- coords[1]
    y <- coords[2]
    
    # Create a new point and store it
    new_points[i] <- sprintf("POINT(%.1f %.1f)", x, y)  # Modify the format as needed
  }
  
  return(new_points)
}

intersect3_oslo$geometry <- sapply(intersect3_oslo$geometry, function(geom) {
  ifelse(startsWith(as.character(geom), "MULTIPOINT"),
         process_multipoint(as.character(geom)),
         as.character(geom))
})

# Convert to sf object and set geometry column
intersect3_oslo <- st_as_sf(intersect3_oslo, coords = "geometry", crs = st_crs(shp2_oslo))
st_geometry(intersect3_oslo) <- "geometry"

# Plotting the map
oslo_map <- ggplot() +
  geom_sf(data = shp2_oslo, color = "gray30", size = 0.2, fill = "lightblue1") +
  geom_sf(data = intersect3_oslo, aes(color = occurrences), size = 1.5, fill = NA) +
  scale_color_viridis(option = "plasma", begin = 0, end = 1, direction = -1) +
  ggtitle("Oslo") +
  theme_bw() +
  theme(axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        plot.title.position = "panel",
        plot.title = element_text(hjust = 0.5)
  )

print(oslo_map)

wkt_coords(intersect3_oslo$geometry)



wkt_data <- st_as_sf(intersect3_oslo, wkt = "geometry", crs = 4326)
print(wkt_data)


# Assuming "wkt_data" is your sf object containing WKT geometries
# Parse the WKT geometries into sf objects
parsed_sf <- st_as_sf(wkt_data, wkt = "geometry")

# Extract individual geometries
geoms <- st_geometry(parsed_sf)

# Initialize empty vectors to store latitude and longitude coordinates
latitude <- numeric()
longitude <- numeric()

# Loop through each geometry and extract coordinates
for (geom in geoms) {
  # Extract coordinates from the geometry
  coords <- st_coordinates(geom)
  
  # Append latitude and longitude coordinates to respective vectors
  latitude <- c(latitude, coords[, "Y"])
  longitude <- c(longitude, coords[, "X"])
}

# Print or use the latitude and longitude coordinates as needed
print(longitude)
print(latitude)



# Assuming "intersect3_oslo" is your data frame and "geometry" is the column containing WKT strings
# Parse the WKT geometries into sf objects
# Load the sf package
library(sf)

# Assuming "intersect3_oslo" is your data frame and "geometry" is the column containing WKT strings
# Parse the WKT geometries into sf objects
parsed_sf <- st_as_sf(intersect3_oslo, wkt = "geometry")

# Extract individual geometries
geoms <- st_geometry(parsed_sf)

# Initialize empty vectors to store latitude and longitude coordinates
latitude <- numeric()
longitude <- numeric()

# Loop through each geometry and extract coordinates
for (geom in geoms) {
  # Extract coordinates from the geometry
  coords <- st_coordinates(geom)
  
  # Append latitude and longitude coordinates to respective vectors
  latitude <- c(latitude, coords[, "Y"])
  longitude <- c(longitude, coords[, "X"])
}

# Add latitude and longitude columns to the existing data frame
intersect3_oslo$latitude <- latitude
intersect3_oslo$longitude <- longitude

# Print the updated data frame with latitude and longitude columns
print(intersect3_oslo)






# Load the sf package
library(sf)

# Assuming "intersect3_oslo" is your data frame and "geometry" is the column containing WKT strings
# Parse the WKT geometries into sf objects
parsed_sf <- st_as_sf(intersect3_oslo, wkt = "geometry")

# Extract individual geometries
geoms <- st_geometry(parsed_sf)

# Initialize empty lists to store latitude and longitude coordinates
latitude_list <- list()
longitude_list <- list()

# Loop through each geometry and extract coordinates
for (geom in geoms) {
  # Extract coordinates from the geometry
  coords <- st_coordinates(geom)
  
  # Append latitude and longitude coordinates to respective lists
  latitude_list <- c(latitude_list, list(coords[, "Y"]))
  longitude_list <- c(longitude_list, list(coords[, "X"]))
}

# Add latitude and longitude columns to the existing data frame
intersect3_oslo$latitude <- latitude_list
intersect3_oslo$longitude <- longitude_list

# Print the updated data frame with latitude and longitude columns
print(intersect3_oslo)


print.table(intersect3_oslo$geometry)


oslo_map <- ggplot() +
  geom_sf(data = shp2_oslo, color = "gray30", size = 0.2, fill = "lightblue1") +
  geom_sf(data = intersect3_oslo, aes(color = occurrences), size = 1.5, fill = NA) +
  scale_color_viridis(option = "plasma", begin = 0, end = 1, direction = -1) +
  ggtitle("Oslo") +
  theme_bw() +
  theme(axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        plot.title.position = "panel",
        plot.title = element_text(hjust = 0.5)
  )

print(oslo_map)
##### SIMEN KOOD END ###############################################################
sf_objects <- st_as_sf(intersect3_oslo, "geometry", EWKT = TRUE)

# Extract individual geometries
geoms <- st_geometry(sf_objects)

# Initialize empty vectors to store latitude and longitude coordinates
latitude <- numeric()
longitude <- numeric()

# Loop through each geometry and extract coordinates
for (geom in geoms) {
  # Extract coordinates from the geometry
  coords <- st_coordinates(geom)
  
  # Append latitude and longitude coordinates to respective vectors
  latitude <- c(latitude, coords[, "Y"])
  longitude <- c(longitude, coords[, "X"])
}

# Print the latitude and longitude coordinates
print(latitude)
print(longitude)


# Create a data frame to store latitude and longitude coordinates along with identifiers
coordinates_df <- data.frame(
  id = numeric(),
  latitude = numeric(),
  longitude = numeric()
)

# Iterate over each geometry and extract coordinates
for (i in seq_along(geoms)) {
  coords <- st_coordinates(geoms[[i]])
  if (nrow(coords) > 0) {
    coordinates_df <- rbind(coordinates_df, data.frame(
      id = rep(i, nrow(coords)),
      latitude = coords[, "Y"],
      longitude = coords[, "X"]
    ))
  }
}

# Remove the first empty row
coordinates_df <- coordinates_df[-1,]

# Print the first few rows of the coordinates data frame
print(coordinates_df)

print.table(intersect3_oslo)


# Create a data frame to store latitude and longitude coordinates along with identifiers
coordinates_df <- data.frame(
  id = rep(1:nrow(intersect3_oslo), times = sapply(geoms, function(geom) nrow(st_coordinates(geom)))),
  latitude = numeric(),
  longitude = numeric()
)

# Iterate over each geometry and extract coordinates
for (i in seq_along(geoms)) {
  coords <- st_coordinates(geoms[[i]])
  coordinates_df$latitude <- c(coordinates_df$latitude, coords[, "Y"])
  coordinates_df$longitude <- c(coordinates_df$longitude, coords[, "X"])
}

# Print the first few rows of the coordinates data frame
print(head(coordinates_df))
################################### STATISTICS #######################################################
library(ggplot2)
library(cowplot)  # Load the cowplot package for arranging plots

# Set up the grid of plots for each region
plot_grid(
  finnmark_map, troms_map, nordland_map, 
  nrow = 1, byrow = TRUE,
  align = "h", axis = "l"
) 

plot_grid(
  troendelag_map, moere_map,
  nrow = 1, byrow = TRUE,
  align = "h", axis = "l"
)

plot_grid(
  vestland_map,  rogaland_map, 
  nrow = 1, byrow = TRUE,
  align = "h", axis = "l"
)
  
plot_grid(
  agder_map, telemark_map,
  nrow = 1, byrow = TRUE,
  align = "h", axis = "l"
)

plot_grid(
 buskerud_map, vestfold_map, oslo_map,
  nrow =1 , byrow = TRUE,
  align = "h", axis = "l"
)

 plot_grid(
 akershus_map, oestfold_map,
   nrow = 1, byrow = TRUE,
   align = "h", axis = "l"
)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% WoRMS
library(worrms) # (https://www.marinespecies.org/)

#synonyms <- wm_synonyms_(id = c(aphiaIDs)) # Synonyms, do any overlap with the scientific name given with AphiaID
#print(synonyms)'

# Summarizing by classification
aphiaIDs <- unique(intersect3$aphiaID)
print(aphiaIDs)

aphia_classification <- wm_classification_(id = c(aphiaIDs))
print(aphia_classification)

# Summarize by species name 
spp_taxa <- aphia_classification %>%
  filter(rank == "Species") %>%
  group_by(scientificname, AphiaID) %>%
  summarize(occurrences = n())
print(spp_taxa) # 2,551 unique species names, includes birds

# Write the list of species to an Excel file (includes birds)
library(openxlsx)
spp_xlsx <- write.xlsx(spp_taxa, 'spp_taxa.xlsx')

unique(intersect3$class)
taxa_by_class <- intersect3 %>%
  group_by(class) %>%
  summarize(total_occurrences = sum(occurrences, na.rm = TRUE))
print(taxa_by_class) # includes NA

sum(taxa_by_class$total_occurrences) # 136,945

# Calculate the ratio of each class versus the total sum of occurrences
total_sum_by_class <- sum(taxa_by_class$total_occurrences) # Total sum of occurrences ; 135,945

percentage_occ_per_class <- taxa_by_class %>%
  mutate(percentage = sprintf("%.5f%%", (total_occurrences / total_sum_by_class * 100)))
print(percentage_occ_per_class) # percentage column says what percent of the total is each class
sum(percentage_occ_per_class$total_occurrences) # 136,945

# Add a separate row for NA values and bind them to the table
na_row <- intersect3 %>%
  filter(is.na(class)) %>%
  summarize(total_occurrences = sum(occurrences, na.rm = TRUE), class = "NA")
taxa_by_class1 <- bind_rows(taxa_by_class, na_row)
print(taxa_by_class)

# Calculate the ratio of each class (excluding Aves) versus the total sum of occurrences (excluding Aves)
total_sum_by_class <- sum(taxa_by_class$total_occurrences) # Total sum of occurrences

percentage_occ_per_class <- taxa_by_class1 %>%
  mutate(percentage = sprintf("%.5f%%", (total_occurrences / total_sum_by_class) * 100))
print(percentage_occ_per_class) # percentage column says what percent of the total is each class
sum(percentage_occ_per_class$total_occurrences) # 136,945


# Returns the data into a format for latex, using kableExtra
library(kableExtra)
kable(percentage_occ_per_class, "latex", file = "Percentage_occ_per_class.tex")

#WHAT I WANT TO DO IS RUN THE APHIAID FOR SPECIES NAMES AND THEN RUN THAT LIST USING THE IUCN PACAKGE AGAINST THE IUCN RED LIST DATA TO FIND ANY ENDANGERED SPECIES
aphia_names <- wm_id2name_(aphiaIDs)
print(aphia_names)
library(rredlist) #I need to generate a token to use the IUCN API but the website is giving a 404 error, I emailed them about it 16.04.2024

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% FIND NA VALUES

# Print NA/missing information of intersect3
indices_with_na <- which(colSums(is.na(intersect3)) > 0)
print(indices_with_na) #family; REF

# Print the number of NA values in each column
for (i in indices_with_na) {
  cat("Column", i, "has", sum(is.na(intersect3[, i])), "NA values.\n")
}

# Column 5 has 1546 NA values. - Family
# Column 22 has 13799 NA values. - REF

# Print NA/missing information of intersect3
indices_with_na <- which(rowSums(is.na(intersect3)) > 0)
print(indices_with_na)

# Print the number of NA values in each row
for (i in indices_with_na) {
  cat("Row", i, "has", sum(is.na(intersect3[i, ])), "NA values.\n") # Lists every row with an NA value (18,397 rows)
}

any(is.na(intersect3$originalScientificName)) # FALSE

# Find NA values in intersect3
# Remove rows with NA values
intersect3_no_na <- intersect3[, !names(intersect3) %in% c("REF")]

# Find rows with NA values by comparing row counts
rows_with_na <- nrow(intersect3) - nrow(intersect3_no_na)
print(rows_with_na) # 0

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SUMMARIZE OCCURRENCES

sum(intersect3$occurrences) #136,945

length(unique(intersect3$originalScientificName)) # 3737

# % of occurrences for each county compared to sum of total occurrences
occurrence_ratios <- c(
  (sum(intersect3_finnmark$occurrences) / sum(intersect3$occurrences)),
  (sum(intersect3_moere$occurrences) / sum(intersect3$occurrences)), 
  (sum(intersect3_nordland$occurrences) / sum(intersect3$occurrences)),
  (sum(intersect3_troms$occurrences) / sum(intersect3$occurrences)),
  (sum(intersect3_troendelag$occurrences) / sum(intersect3$occurrences)),
  (sum(intersect3_agder$occurrences) / sum(intersect3$occurrences)),
  (sum(intersect3_akershus$occurrences) / sum(intersect3$occurrences)), 
  (sum(intersect3_buskerud$occurrences) / sum(intersect3$occurrences)), 
  (sum(intersect3_oslo$occurrences) / sum(intersect3$occurrences)), 
  (sum(intersect3_rogaland$occurrences) / sum(intersect3$occurrences)),
  (sum(intersect3_telemark$occurrences) / sum(intersect3$occurrences)), 
  (sum(intersect3_vestfold$occurrences) / sum(intersect3$occurrences)), 
  (sum(intersect3_vestland$occurrences) / sum(intersect3$occurrences)), 
  (sum(intersect3_oestfold$occurrences) / sum(intersect3$occurrences))
  )
print(occurrence_ratios)
# Format the ratios as percentages
occ_percentage <- percent(occurrence_ratios, 2)
print(occ_percentage)

sum(unique(intersect3$area_fylk)) # 153,463.3 sq. km
# Calculate the proportion relative to the total area
size_ratios <- c(
  (unique(intersect3$area_fylk[intersect3$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]) / sum(unique(intersect3$area_fylk))),
  (unique(intersect3$area_fylk[intersect3$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]) / sum(unique(intersect3$area_fylk))),
  (unique(intersect3$area_fylk[intersect3$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\""]) / sum(unique(intersect3$area_fylk))),
  (unique(intersect3$area_fylk[intersect3$FYLKESNAVN == "\"Troms - Romsa - Tromssa\""]) / sum(unique(intersect3$area_fylk))),
  (unique(intersect3$area_fylk[intersect3$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]) / sum(unique(intersect3$area_fylk))),
  (unique(intersect3$area_fylk[intersect3$FYLKESNAVN == "Agder"]) / sum(unique(intersect3$area_fylk))),
  (unique(intersect3$area_fylk[intersect3$FYLKESNAVN == "Akershus"]) / sum(unique(intersect3$area_fylk))),
  (unique(intersect3$area_fylk[intersect3$FYLKESNAVN == "Buskerud"]) / sum(unique(intersect3$area_fylk))),
  (unique(intersect3$area_fylk[intersect3$FYLKESNAVN == "Oslo"]) / sum(unique(intersect3$area_fylk))),
  (unique(intersect3$area_fylk[intersect3$FYLKESNAVN == "Rogaland"]) / sum(unique(intersect3$area_fylk))),
  (unique(intersect3$area_fylk[intersect3$FYLKESNAVN == "Telemark"]) / sum(unique(intersect3$area_fylk))),
  (unique(intersect3$area_fylk[intersect3$FYLKESNAVN == "Vestfold"]) / sum(unique(intersect3$area_fylk))),
  (unique(intersect3$area_fylk[intersect3$FYLKESNAVN == "Vestland"]) / sum(unique(intersect3$area_fylk))),
  (unique(intersect3$area_fylk[intersect3$FYLKESNAVN == "\u00D8stfold"]) / sum(unique(intersect3$area_fylk)))
)                 
print(size_ratios) # in sq km
# Format the ratios as percentages
size_percentage <- percent(size_ratios, 2)
print(size_percentage)

by_county_occ_sum <- intersect3 %>%
  group_by(FYLKESNAVN) %>%
  summarize(occurrences = sum(occurrences))
print(by_county_occ_sum)

by_county_area_sum <- intersect3 %>%
  group_by(FYLKESNAVN) %>%
  summarize(area_fylk = unique(area_fylk))
print(by_county_area_sum)

# Create a summary table 
summary_table <- data.frame(
  FYLKESNAVN = (by_county_area_sum$FYLKESNAVN),
  Total_Occurrences = (by_county_occ_sum$occurrences),
  Percent_Occurrences = (occ_percentage),
  County_Size = (by_county_area_sum$area_fylk),
  Percent_Size = (size_percentage)
)
print(summary_table)

# Returns the data into a format for latex, using kableExtra
library(kableExtra)
kable(summary_table, "latex", file = "summary_table.tex")

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% STATS FROM GIS LAYERS
library(ggplot2)
library(sf)
library(viridis)

# Read the shp made in ArcGIS Pro to an sf object - kelp reference areas (https://open-data-fiskeridirektoratet-fiskeridir.hub.arcgis.com/datasets/50c3d14959444e77ac6ed6d96308a2bd_0/explore?location=60.485391%2C9.006054%2C6.49)
tare_shp <- st_read("C:/Users/gngia/OneDrive/Documents/new obis/tare_referense_omr_new.shp", stringsAsFactors=FALSE)
tare_shp <- st_transform(tare_shp, crs = "EPSG:4326")
print(tare_shp1 <- st_crs(tare_shp)) # area is in sq km
class(tare_shp)

ggplot() +
  geom_sf(data = shp) +
  geom_sf(data = shp2) +
  geom_sf(data = tare_shp, aes(color = fylke), size = 0.25) +
  theme_bw()

unique(tare_shp$fylke)

# Find the sums of all areas of kelp reference areas per county
# Use the sum of municipality areas summed for each county = sum_areas from above
# Calculate the proportion of kelp reference areas per county relative to the total area of each county
tare_ref_omr_ratios <- c(
  (sum(tare_shp$area[tare_shp$fylke == "M\u00F8re og Romsdal"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]*1e-06)*100), # 0.1713162 
  (sum(tare_shp$area[tare_shp$fylke == "Tr\u00F8ndelag"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]*1e-06)*100), # 0.7447074 
  (sum(tare_shp$area[tare_shp$fylke == "Vestland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Vestland"]*1e-06)*100), # 0.7913688 
  (sum(tare_shp$area[tare_shp$fylke == "Nordland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\""]*1e-06)*100) # 0.3765071
)
print(tare_ref_omr_ratios)

# Make tare_ref_omr_ratios output into percentages
tare_ref_percent <- c(0.1713162, 0.7447074, 0.7913688, 0.3765071)
tare_ref_percent <- paste0(round(tare_ref_percent, 2), "%")
print(tare_ref_percent)

# Read the shp made in ArcGIS Pro to an sf object - kelp harvest fields (https://open-data-fiskeridirektoratet-fiskeridir.hub.arcgis.com/datasets/a2b8a2e2b296451c9469a4a01a9f617b_3/explore?location=62.211465%2C10.109458%2C5.77)
tare_hostfelt_shp <- st_read("C:/Users/gngia/OneDrive/Documents/new obis/tare_hostfelt_new.shp", stringsAsFactors=FALSE)
tare_hostfelt_shp <- st_transform(tare_hostfelt_shp, crs = "EPSG:4326")
print(tare_hostfelt_shp1 <- st_crs(tare_hostfelt_shp)) # area is in sq km
class(tare_hostfelt_shp)

ggplot() +
  geom_sf(data = shp) +
  geom_sf(data = shp2) +
  geom_sf(data = tare_hostfelt_shp, aes(color = fylke), size = 1) +
  theme_bw()

unique(tare_hostfelt_shp$fylke)

# Find the sums of all areas of kelp harvest field per county
# Use the sum of municipality areas summed for each county = sum_areas from above
# Calculate the proportion of kelp harvest fields per county relative to the total area of each county water
tare_ratios <- c(
  (sum(tare_hostfelt_shp$area[tare_hostfelt_shp$fylke == "M\u00F8re og Romsdal"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]*1e-06)*100), # 2.939564e+01
  (sum(tare_hostfelt_shp$area[tare_hostfelt_shp$fylke == "M&R og Tr\u00F8ndelag"]) /  ((sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]) + (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""])*1e-06)*100), # 4.287311e-06
  (sum(tare_hostfelt_shp$area[tare_hostfelt_shp$fylke == "Tr\u00F8ndelag"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]*1e-06)*100), # 4.634014e+01
  (sum(tare_hostfelt_shp$area[tare_hostfelt_shp$fylke == "Rogaland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Rogaland"]*1e-06)*100), # 1.929668e+01
  (sum(tare_hostfelt_shp$area[tare_hostfelt_shp$fylke == "Vestland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Vestland"]*1e-06)*100), # 2.927445e+01
  (sum(tare_hostfelt_shp$area[tare_hostfelt_shp$fylke == "Nordland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\""]*1e-06)*100) # 1.441436e+00
)
print(tare_ratios)

# Make tare_ratios output into percentages
tare_hostfelt_percent <- c(2.939564e+01, 4.287311e-06, 4.634014e+01, 1.929668e+01, 2.927445e+01, 1.441436e+00)
tare_hostfelt_percent <- paste0(round(tare_hostfelt_percent, 2), "%")
print(tare_hostfelt_percent)


# SHOULD I ADD TARE HOESTFORBUD REVTANGEN TOO? I THINK IT IS ONLY 1 PLACE IN ROGALAND?

# Read the shp made in ArcGIS Pro to an sf object - coral reef  (https://open-data-fiskeridirektoratet-fiskeridir.hub.arcgis.com/datasets/6466197faeb9430c9665d24a05ae3372_11/explore?location=65.127684%2C15.822468%2C5.01)
#"Prohibition on the use of tools that are towed while fishing, as well as nets, lines and fishing lines"
korall_forbudsomr_shp <- st_read("C:/Users/gngia/OneDrive/Documents/new obis/Korall_rev_forbudsomr_new.shp", stringsAsFactors=FALSE)
korall_forbudsomr_shp <- st_transform(korall_forbudsomr_shp, crs = "EPSG:4326")
print(korall_forbudsomr_shp1 <- st_crs(korall_forbudsomr_shp)) # area is in sq km
class(korall_forbudsomr_shp)

unique(korall_forbudsomr_shp$FYLKESNAVN)

# Find the sums of all areas of prohibited fishing areas near corals per county
# Use the sum of municipality areas summed for each county = sum_areas from above
# Calculate the proportion of prohibited fishing areas near corals per county relative to the total area of each county water
korall_forbudsomr_ratios <- c(
  (sum(korall_forbudsomr_shp$area[korall_forbudsomr_shp$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]*1e-06)*100), # 0.372049970
  (sum(korall_forbudsomr_shp$area[korall_forbudsomr_shp$FYLKESNAVN == "\u00D8stfold"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\u00D8stfold"]*1e-06)*100), # 1.215242501
  (sum(korall_forbudsomr_shp$area[korall_forbudsomr_shp$FYLKESNAVN == "\"Troms - Romsa - Tromssa\"" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Troms - Romsa - Tromssa\""]*1e-06)*100), # 0.281538206
  (sum(korall_forbudsomr_shp$area[korall_forbudsomr_shp$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\"" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\""]*1e-06)*100), # 0.267002361
  (sum(korall_forbudsomr_shp$area[korall_forbudsomr_shp$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]*1e-06)*100), # 0.014312180
  (sum(korall_forbudsomr_shp$area[korall_forbudsomr_shp$FYLKESNAVN == "Rogaland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Rogaland"]*1e-06)*100), # 0.001301746
  (sum(korall_forbudsomr_shp$area[korall_forbudsomr_shp$FYLKESNAVN == "Vestland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Vestland"]*1e-06)*100), # 0.003860877
  (sum(korall_forbudsomr_shp$area[korall_forbudsomr_shp$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]*1e-06)*100) # 0.052212350
)
print(korall_forbudsomr_ratios)

# Make output into percentages
korall_forbudsomr_percent <- c(0.372049970, 1.215242501, 0.281538206, 0.267002361, 0.014312180, 0.001301746, 0.003860877, 0.052212350)
korall_forbudsomr_percent <- paste0(round(korall_forbudsomr_percent, 2), "%")
print(korall_forbudsomr_percent)


# Read the shp made in ArcGIS Pro to an sf object - IMR identified coral reefs (https://kart.hi.no/mareano/web/wicket/bookmarkable/org.geoserver.web.demo.MapPreviewPage?0&filter=false)
korall_id_shp <- st_read("C:/Users/gngia/OneDrive/Documents/new obis/korall_rev_id_new.shp", stringsAsFactors=FALSE)
korall_id_shp <- st_transform(korall_id_shp, crs = "EPSG:4326")
print(korall_id_shp1 <- st_crs(korall_id_shp)) # area is in sq km
class(korall_id_shp)

unique(korall_id_shp$FYLKESNAVN)

# Find the sums of all areas of identified coral reefs (by IMR) per county
# Use the sum of municipality areas summed for each county = sum_areas from above
# Calculate the proportion of identified coral reefs (by IMR) per county relative to the total area of each county water
korall_id_ratios <- c(
  (sum(korall_id_shp$area[korall_id_shp$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]*1e-06)*100), # 0.01419937
  (sum(korall_id_shp$area[korall_id_shp$FYLKESNAVN == "\u00D8stfold"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\u00D8stfold"]*1e-06)*100), # 1.20670438
  (sum(korall_id_shp$area[korall_id_shp$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]*1e-06)*100) # 0.10477064
)
print(korall_id_ratios)

# Make output into percentages
korall_id_percent <- c(0.01419937, 1.20670438, 0.10477064)
korall_id_percent <- paste0(round(korall_id_percent, 2), "%")
print(korall_id_percent)

# Read the shp made in ArcGIS Pro to an sf object - Coral MPA / Coral conservation areas (https://kart.hi.no/mareano/web/wicket/bookmarkable/org.geoserver.web.demo.MapPreviewPage?0&filter=false)
koral_vern_omr <- st_read("C:/Users/gngia/OneDrive/Documents/new obis/korall_rev_vern_omr.shp", stringsAsFactors=FALSE)
koral_vern_omr <- st_transform(koral_vern_omr, crs = "EPSG:4326")
print(koral_vern_omr1 <- st_crs(koral_vern_omr)) # area is in sq km
class(koral_vern_omr)

unique(koral_vern_omr$FYLKESNAVN)

# Find the sums of all areas of coral conservation areas per county
# Use the sum of municipality areas summed for each county = sum_areas from above
# Calculate the proportion of coral conservation areas per county relative to the total area of each county water
korall_vernomr_ratios <- c(
  (sum(koral_vern_omr$area[koral_vern_omr$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]*1e-06)*100), # 0.372049970
  (sum(koral_vern_omr$area[koral_vern_omr$FYLKESNAVN == "\u00D8stfold"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\u00D8stfold"]*1e-06)*100), # 1.215242501
  (sum(koral_vern_omr$area[koral_vern_omr$FYLKESNAVN == "\"Troms - Romsa - Tromssa\"" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Troms - Romsa - Tromssa\""]*1e-06)*100), # 0.281538206
  (sum(koral_vern_omr$area[koral_vern_omr$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\"" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\""]*1e-06)*100), # 0.267002361
  (sum(koral_vern_omr$area[koral_vern_omr$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]*1e-06)*100), # 0.014312180
  (sum(koral_vern_omr$area[koral_vern_omr$FYLKESNAVN == "Rogaland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Rogaland"]*1e-06)*100), # 0.001301746
  (sum(koral_vern_omr$area[koral_vern_omr$FYLKESNAVN == "Vestland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Vestland"]*1e-06)*100), # 0.003860877
  (sum(koral_vern_omr$area[koral_vern_omr$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]*1e-06)*100) # 0.052212350
)
print(korall_vernomr_ratios)


# korall_rev_vern_omr and Korall_rev_forbudsomr_new actually seem to be the same exact data 
#except in korall vern they call them Coral MPAs and in forbudsomr they just say you cant fish or drag line through those areas

# Make output into percentages
korall_vernomr_percent <- c(0.372049971, 1.214478719, 0.281538204,0.267002357, 0.014312180, 0.001301746, 0.003860721, 0.052212350)
korall_vernomr_percent <- paste0(round(korall_vernomr_percent, 2), "%")
print(korall_vernomr_percent)

# Read the shp made in ArcGIS Pro to an sf object - WDPA & WDOECM, Norway (https://www.protectedplanet.net/en)
wdpa_apr <- st_read("C:/Users/gngia/OneDrive/Documents/new obis/wpda_wdoecm_apr.shp", stringsAsFactors=FALSE)
wdpa_apr <- st_transform(wdpa_apr, crs = "EPSG:4326")
print(wdpa_apr1 <- st_crs(wdpa_apr)) # area is in sq km

unique(wdpa_apr$FYLKESNAVN)

# Find the sums of all areas of WDPA & WDOECM per county
# Use the sum of municipality areas summed for each county = sum_areas from above
# Calculate the proportion of WDPA & WDOECM per county relative to the total area of each county water
wdpa_apr_ratios <- c(
  (sum(wdpa_apr$area[wdpa_apr$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]*1e-06)*100), # 4.7017656
  (sum(wdpa_apr$area[wdpa_apr$FYLKESNAVN == "\u00D8stfold"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\u00D8stfold"]*1e-06)*100), # 37.5175125  
  (sum(wdpa_apr$area[wdpa_apr$FYLKESNAVN == "\"Troms - Romsa - Tromssa\"" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Troms - Romsa - Tromssa\""]*1e-06)*100), # 2.2904810  
  (sum(wdpa_apr$area[wdpa_apr$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\"" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\""]*1e-06)*100), # 2.5926527  
  (sum(wdpa_apr$area[wdpa_apr$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]*1e-06)*100), # 0.4752846
  (sum(wdpa_apr$area[wdpa_apr$FYLKESNAVN == "Rogaland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Rogaland"]*1e-06)*100), # 2.1562136  
  (sum(wdpa_apr$area[wdpa_apr$FYLKESNAVN == "Vestland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Vestland"]*1e-06)*100), # 0.9253383  
  (sum(wdpa_apr$area[wdpa_apr$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]*1e-06)*100), # 2.3766661  
  (sum(wdpa_apr$area[wdpa_apr$FYLKESNAVN == "Agder"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Agder"]*1e-06)*100), # 10.77184 
  (sum(wdpa_apr$area[wdpa_apr$FYLKESNAVN == "Akershus"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Akershus"]*1e-06)*100), # 2.5761293 
  (sum(wdpa_apr$area[wdpa_apr$FYLKESNAVN == "Telemark"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Telemark"]*1e-06)*100), # 0.2093967
  (sum(wdpa_apr$area[wdpa_apr$FYLKESNAVN == "Vestfold"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Vestfold"]*1e-06)*100), # 0.368252 
  (sum(wdpa_apr$area[wdpa_apr$FYLKESNAVN == "Oslo"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Oslo"]*1e-06)*100), # 7.818589
  (sum(wdpa_apr$area[wdpa_apr$FYLKESNAVN == "Buskerud"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Buskerud"]*1e-06)*100) # 6.121036
)
print(wdpa_apr_ratios)

# Make output into percentages
wdpa_percent <- c(4.7017656, 37.5175125,  2.2904810,  2.5926527,0.4752846,  2.1562136,  0.9253383,  2.3766661,10.7718386 , 2.5761293 , 0.2093967  ,0.3682520,7.8185892,  6.1210359)
wdpa_percent <- paste0(round(wdpa_percent, 2), "%")
print(wdpa_percent)

# Determine the number of unique levels in the IUCN_CAT variable
num_levels <- nlevels(factor(wdpa_apr$IUCN_CAT))
# Generate colors from the Viridis palette, adding one extra color
colors <- viridis_pal(num_levels + 1)(num_levels)
# Create the plot
ggplot() +
  geom_sf(data = shp2) +
  geom_sf(data = wdpa_apr, aes(color = IUCN_CAT), size = 5) +
  scale_color_manual(values = colors) +  # Set colors manually
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
  theme_bw()

# Read the shp made in ArcGIS Pro to an sf object - SVO (https://kartkatalog.miljodirektoratet.no/Dataset/Details/702)
svo <- st_read("C:/Users/gngia/OneDrive/Documents/new obis/svo.shp", stringsAsFactors=FALSE)
svo <- st_transform(svo, crs = "EPSG:4326")
print(svo1 <- st_crs(svo)) # area is in sq km

unique(svo$FYLKESNAVN)

# Find the sums of all areas of SVO per county
# Use the sum of municipality areas summed for each county = sum_areas from above
# Calculate the proportion of SVO per county relative to the total area of each county water
svo_ratios <- c(
  (sum(svo$area[svo$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]*1e-06)*100), # 73.4780405 
  (sum(svo$area[svo$FYLKESNAVN == "\u00D8stfold"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\u00D8stfold"]*1e-06)*100), # 63.3842406   
  (sum(svo$area[svo$FYLKESNAVN == "\"Troms - Romsa - Tromssa\"" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Troms - Romsa - Tromssa\""]*1e-06)*100), # 58.7215246   
  (sum(svo$area[svo$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\"" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\""]*1e-06)*100), # 68.4876118   
  (sum(svo$area[svo$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]*1e-06)*100), # 53.5008102
  (sum(svo$area[svo$FYLKESNAVN == "Rogaland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Rogaland"]*1e-06)*100), # 33.7564396   
  (sum(svo$area[svo$FYLKESNAVN == "Vestland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Vestland"]*1e-06)*100), # 18.2648541   
  (sum(svo$area[svo$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]*1e-06)*100), # 41.5677366   
  (sum(svo$area[svo$FYLKESNAVN == "Agder"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Agder"]*1e-06)*100), # 22.2974374   
  (sum(svo$area[svo$FYLKESNAVN == "Telemark"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Telemark"]*1e-06)*100), # 0.1925922
  (sum(svo$area[svo$FYLKESNAVN == "Vestfold"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Vestfold"]*1e-06)*100) # 53.6597639 
)
print(svo_ratios)

# Make output into percentages
svo_percent <- c(73.4780405, 63.3842406, 58.7215246, 68.4876118,53.5008102, 33.7564396, 18.2648541 ,41.5677366, 22.2974374  ,0.1925922, 53.6597639)
svo_percent <- paste0(round(svo_percent, 2), "%")
print(svo_percent)

# Read the shp made in ArcGIS Pro to an sf object - OSPAR Interactive Map Tool data (https://carto.mpa.ospar.org/en/1/ospar.map)
carto_mpa <- st_read("C:/Users/gngia/OneDrive/Documents/new obis/carto_mpa.shp", stringsAsFactors=FALSE)
carto_mpa <- st_transform(carto_mpa, crs = "EPSG:4326")
print(carto_mpa1 <- st_crs(carto_mpa)) # area is in sq km

unique(carto_mpa$FYLKESNAVN)

# Find the sums of all areas of MPAs per county
# Use the sum of municipality areas summed for each county = sum_areas from above
# Calculate the proportion of MPAs per county relative to the total area of each county water
carto_mpa_ratios <- c(
  (sum(carto_mpa$area[carto_mpa$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]*1e-06)*100), # 0.3720752  
  (sum(carto_mpa$area[carto_mpa$FYLKESNAVN == "\u00D8stfold"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\u00D8stfold"]*1e-06)*100), # 35.9828636     
  (sum(carto_mpa$area[carto_mpa$FYLKESNAVN == "\"Troms - Romsa - Tromssa\"" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Troms - Romsa - Tromssa\""]*1e-06)*100), # 2.5794776     
  (sum(carto_mpa$area[carto_mpa$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\"" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\""]*1e-06)*100), # 0.6461315     
  (sum(carto_mpa$area[carto_mpa$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]*1e-06)*100), # 4.9742430
  (sum(carto_mpa$area[carto_mpa$FYLKESNAVN == "Rogaland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Rogaland"]*1e-06)*100), # 1.8524839     
  (sum(carto_mpa$area[carto_mpa$FYLKESNAVN == "Vestland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Vestland"]*1e-06)*100), # 0.3454916     
  (sum(carto_mpa$area[carto_mpa$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]*1e-06)*100), # 0.5081613     
  (sum(carto_mpa$area[carto_mpa$FYLKESNAVN == "Agder"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Agder"]*1e-06)*100), # 8.8395135    
  (sum(carto_mpa$area[carto_mpa$FYLKESNAVN == "Telemark"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Telemark"]*1e-06)*100), # 12.4346427
  (sum(carto_mpa$area[carto_mpa$FYLKESNAVN == "Vestfold"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Vestfold"]*1e-06)*100) # 17.4952050 
)
print(carto_mpa_ratios)

# Make output into percentages
carto_percent <- c(0.3720752 ,35.9828636, 2.5794776 , 0.6461315, 4.9742430 , 1.8524839,0.3454916  ,0.5081613, 8.8395135, 12.4346427,17.4952050)
carto_percent <- paste0(round(carto_percent, 2), "%")
print(carto_percent)


# Read the shp made in ArcGIS Pro to an sf object - ODIMS 2021 data (https://odims.ospar.org/en/submissions/ospar_mpa_2021_07/)
ospar_mpa <- st_read("C:/Users/gngia/OneDrive/Documents/new obis/ospar_mpa_new.shp", stringsAsFactors=FALSE)
ospar_mpa <- st_transform(ospar_mpa, crs = "EPSG:4326")
print(ospar_mpa1 <- st_crs(ospar_mpa)) # area is in sq km

unique(ospar_mpa$FYLKESNAVN)

# Find the sums of all areas of MPAs per county
# Use the sum of municipality areas summed for each county = sum_areas from above
# Calculate the proportion of MPAs per county relative to the total area of each county water
ospar_mpa_ratios <- c(
  (sum(ospar_mpa$area[ospar_mpa$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]*1e-06)*100), # 0.37207520    
  (sum(ospar_mpa$area[ospar_mpa$FYLKESNAVN == "\u00D8stfold"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\u00D8stfold"]*1e-06)*100), # 35.98286348        
  (sum(ospar_mpa$area[ospar_mpa$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\"" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\""]*1e-06)*100), # 0.05034488        
  (sum(ospar_mpa$area[ospar_mpa$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]*1e-06)*100), # 0.01431218  
  (sum(ospar_mpa$area[ospar_mpa$FYLKESNAVN == "Rogaland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Rogaland"]*1e-06)*100), # 1.85248395      
  (sum(ospar_mpa$area[ospar_mpa$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]*1e-06)*100), # 0.40943903        
  (sum(ospar_mpa$area[ospar_mpa$FYLKESNAVN == "Agder"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Agder"]*1e-06)*100), # 8.83951350       
  (sum(ospar_mpa$area[ospar_mpa$FYLKESNAVN == "Telemark"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Telemark"]*1e-06)*100), # 12.43464272 
  (sum(ospar_mpa$area[ospar_mpa$FYLKESNAVN == "Vestfold"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Vestfold"]*1e-06)*100) # 17.49520502 
)
print(ospar_mpa_ratios)

# Make output into percentages
ospar_percent <- c(0.37207520 ,35.98286348, 0.05034488 , 0.01431218,1.85248395 , 0.40943903, 8.83951350, 12.43464272, 17.49520502)
ospar_percent <- paste0(round(ospar_percent, 2), "%")
print(ospar_percent)

# Read the shp made in ArcGIS Pro to an sf object - Naturvernområder (https://karteksport.miljodirektoratet.no/)
naturvernomr <- st_read("C:/Users/gngia/OneDrive/Documents/new obis/naturvernomr.shp", stringsAsFactors=FALSE)
naturvernomr <- st_transform(naturvernomr, crs = "EPSG:4326")
print(naturvernomr1 <- st_crs(naturvernomr)) # area is in sq km

#Changing column names that did not translate to the encoding properly
names(naturvernomr)[names(naturvernomr) == "skj.U.00F8.tselp"] <- "skj\u00F8tselplan"
names(naturvernomr)[names(naturvernomr) == "f.U.00F8.rstegan"] <- "f\u00F8rstegangVernet"

unique(naturvernomr$FYLKESNAVN)

# Find the sums of all areas of nature conservation areas per county
# Use the sum of municipality areas summed for each county = sum_areas from above
# Calculate the proportion of nature conservation per county relative to the total area of each county water
naturvernomr_ratios <- c(
  (sum(naturvernomr$area[naturvernomr$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]*1e-06)*100), # 4.716314 
  (sum(naturvernomr$area[naturvernomr$FYLKESNAVN == "\u00D8stfold"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\u00D8stfold"]*1e-06)*100), # 43.947853    
  (sum(naturvernomr$area[naturvernomr$FYLKESNAVN == "\"Troms - Romsa - Tromssa\"" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Troms - Romsa - Tromssa\""]*1e-06)*100), # 5.008229    
  (sum(naturvernomr$area[naturvernomr$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\"" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\""]*1e-06)*100), # 3.498783    
  (sum(naturvernomr$area[naturvernomr$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]*1e-06)*100), # 5.566015  
  (sum(naturvernomr$area[naturvernomr$FYLKESNAVN == "Rogaland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Rogaland"]*1e-06)*100), # 5.431686  
  (sum(naturvernomr$area[naturvernomr$FYLKESNAVN == "Vestland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Vestland"]*1e-06)*100), # 1.631439    
  (sum(naturvernomr$area[naturvernomr$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]*1e-06)*100), # 6.079442   
  (sum(naturvernomr$area[naturvernomr$FYLKESNAVN == "Agder"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Agder"]*1e-06)*100), # 10.951922   
  (sum(naturvernomr$area[naturvernomr$FYLKESNAVN == "Akershus"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Akershus"]*1e-06)*100), # 1.012029  
  (sum(naturvernomr$area[naturvernomr$FYLKESNAVN == "Telemark"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Telemark"]*1e-06)*100), # 12.579167 
  (sum(naturvernomr$area[naturvernomr$FYLKESNAVN == "Vestfold"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Vestfold"]*1e-06)*100), # 18.159375 
  (sum(naturvernomr$area[naturvernomr$FYLKESNAVN == "Oslo"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Oslo"]*1e-06)*100), # 6.810401  
  (sum(naturvernomr$area[naturvernomr$FYLKESNAVN == "Buskerud"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Buskerud"]*1e-06)*100) # 6.121035
  )
print(naturvernomr_ratios)

# Make output into percentages
naturvern_percent <- c(4.716314, 43.947853, 5.008229 , 3.498783,5.566015,  5.431686, 1.631439 , 6.079442, 10.951922 , 1.012029, 12.579167, 18.159375, 6.810401 , 6.121035)
naturvern_percent <- paste0(round(naturvern_percent, 2), "%")
print(naturvern_percent)

# Read the shp made in ArcGIS Pro to an sf object - KBAs (www.birdlife.org)
kba <- st_read("C:/Users/gngia/OneDrive/Documents/new obis/kba.shp", stringsAsFactors=FALSE)
kba <- st_transform(kba, crs = "EPSG:4326")
print(kba1 <- st_crs(kba)) # area is in sq km

unique(kba$FYLKESNAVN)

# Find the sums of all areas of KBAs per county
# Use the sum of municipality areas summed for each county = sum_areas from above
# Calculate the proportion of KBAs per county relative to the total area of each county water
kba_ratios <- c(
  (sum(kba$area[kba$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]*1e-06)*100), # 4.71686754  
  (sum(kba$area[kba$FYLKESNAVN == "\u00D8stfold"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\u00D8stfold"]*1e-06)*100), # 1.46388072     
  (sum(kba$area[kba$FYLKESNAVN == "\"Troms - Romsa - Tromssa\"" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Troms - Romsa - Tromssa\""]*1e-06)*100), # 0.68690089     
  (sum(kba$area[kba$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\"" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\""]*1e-06)*100), # 2.34074604     
  (sum(kba$area[kba$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]*1e-06)*100), # 4.73011768  
  (sum(kba$area[kba$FYLKESNAVN == "Rogaland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Rogaland"]*1e-06)*100), # 2.34715764   
  (sum(kba$area[kba$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]*1e-06)*100), # 5.24032193    
  (sum(kba$area[kba$FYLKESNAVN == "Agder"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Agder"]*1e-06)*100), # 0.50188690    
  (sum(kba$area[kba$FYLKESNAVN == "Vestfold"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Vestfold"]*1e-06)*100) # 0.04011559 
)
print(kba_ratios)

# Make output into percentages
kba_percent <- c(4.71686754 ,1.46388072, 0.68690089 ,2.34074604, 4.73011768 ,2.34715764, 5.24032193 ,0.50188690, 0.04011559)
kba_percent <- paste0(round(kba_percent, 2), "%")
print(kba_percent)


# Read the shp made in ArcGIS Pro to an sf object - Ramsar areas (https://https://karteksport.miljodirektoratet.no/)
ramsar <- st_read("C:/Users/gngia/OneDrive/Documents/new obis/ramsar.shp", stringsAsFactors=FALSE)
ramsar <- st_transform(ramsar, crs = "EPSG:4326")
print(ramsar1 <- st_crs(ramsar)) # area is in sq km

#Changing column names that did not translate to the encoding properly
names(ramsar)[names(ramsar) == "omr.U.00E5.deBes"] <- "omr\u00E5deBeskrivelse"

unique(ramsar$FYLKESNAVN)

# Find the sums of all areas of Ramsar areas per county
# Use the sum of municipality areas summed for each county = sum_areas from above
# Calculate the proportion of Ramsar areas per county relative to the total area of each county water
ramsar_ratios <- c(
  (sum(ramsar$area[ramsar$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"M\u00F8re og Romsdal\""]*1e-06)*100), # 0.05843156   
  (sum(ramsar$area[ramsar$FYLKESNAVN == "\u00D8stfold"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\u00D8stfold"]*1e-06)*100), # 1.67994723      
  (sum(ramsar$area[ramsar$FYLKESNAVN == "\"Troms - Romsa - Tromssa\"" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Troms - Romsa - Tromssa\""]*1e-06)*100), # 0.17569259      
  (sum(ramsar$area[ramsar$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\"" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\""]*1e-06)*100), # 0.85877814      
  (sum(ramsar$area[ramsar$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""]*1e-06)*100), # 0.18524557   
  (sum(ramsar$area[ramsar$FYLKESNAVN == "Rogaland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Rogaland"]*1e-06)*100), # 1.53905531   
  (sum(ramsar$area[ramsar$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""]*1e-06)*100), # 3.82138631     
  (sum(ramsar$area[ramsar$FYLKESNAVN == "Agder"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Agder"]*1e-06)*100), # 0.05057133     
  (sum(ramsar$area[ramsar$FYLKESNAVN == "Vestfold"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Vestfold"]*1e-06)*100) # 0.03360105 
)
print(ramsar_ratios)

# Make output into percentages
ramsar_percent <- c(0.05843156, 1.67994723, 0.17569259 ,0.85877814, 0.18524557, 1.53905531,3.82138631, 0.05057133, 0.03360105)
ramsar_percent <- paste0(round(ramsar_percent, 2), "%")
print(ramsar_percent)

# Read the shp made in ArcGIS Pro to an sf object - lobster conservation zones (https://open-data-fiskeridirektoratet-fiskeridir.hub.arcgis.com/datasets/d46c75e3832845eb8058c5c1c9f34847_9/explore?location=59.842953%2C14.398378%2C5.39)
lob_con <- st_read("C:/Users/gngia/OneDrive/Documents/new obis/hummer_fredningsoner.shp", stringsAsFactors=FALSE)
lob_con <- st_transform(lob_con, crs = "EPSG:4326")
print(lob_con1 <- st_crs(lob_con)) # area is in sq km

unique(lob_con$FYLKESNAVN)

# Find the sums of all areas of  lobster conservation zones per county
# Use the sum of municipality areas summed for each county = sum_areas from above
# Calculate the proportion of lobster conservation per county relative to the total area of each county water
lob_con_ratios <- c(
  (sum(lob_con$area[lob_con$FYLKESNAVN == "Agder"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Agder"]*1e-06)*100), # 0.05057133   
  (sum(lob_con$area[lob_con$FYLKESNAVN == "Akershus"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Akershus"]*1e-06)*100), # 0.05057133     
  (sum(lob_con$area[lob_con$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\"" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\""]*1e-06)*100), # 0.85877814
  (sum(lob_con$area[lob_con$FYLKESNAVN == "Oslo" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Oslo"]*1e-06)*100), # 0.85877814      
  (sum(lob_con$area[lob_con$FYLKESNAVN == "Rogaland"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Rogaland"]*1e-06)*100), # 1.53905531   
  (sum(lob_con$area[lob_con$FYLKESNAVN == "Telemark"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Telemark"]*1e-06)*100), # 3.82138631     
  (sum(lob_con$area[lob_con$FYLKESNAVN == "Vestfold"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Vestfold"]*1e-06)*100), # 0.03360105 
  (sum(lob_con$area[lob_con$FYLKESNAVN == "Vestland" ]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Vestland"]*1e-06)*100), # 0.85877814      
  (sum(lob_con$area[lob_con$FYLKESNAVN == "\u00D8stfold"]) / (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\u00D8stfold"]*1e-06)*100) # 1.67994723      
)
print(lob_con_ratios)

# Make output into percentages
lob_con_percent <- c(0.07721415,  3.08883530,  0.00864787, 28.67519468 , 0.49820126,  0.35300533, 1.37768073 , 0.07832196  ,2.22179824)
lob_con_percent <- paste0(round(lob_con_percent, 2), "%")
print(lob_con_percent)

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% WEIRD PLOTTING STUFF
library(sf)

class(intersect3_oslo)
class(intersect3_oslo$geometry)

recast <- st_as_sf(intersect3_oslo)
class(recast)
print(recast)
class(recast$geometry)

geom_recast <- recast %>%
  st_as_sf(wkt = "geometry") %>%
  st_coordinates(geometry) %>%
  as.data.frame() %>%
  rename(longitude = X, latitude = Y) %>%
  st_as_sf(coords = c("longitude", "latitude"), crs = "EPSG:4326")



library(sf)
library(dplyr)

# Step 1: Convert WKT strings to sf objects
recast <- intersect3_oslo %>%
  as.data.frame() %>%
  st_as_sf( wkt = "geometry") %>%
  st_transform(crs = 4326) %>%
  st_cast(recast,"POINT") %>%
  rename(longitude = X, latitude = Y) %>%
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326)


# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% GRID
sum(intersect3$occurrences)
library(tidyverse)
library(sf)
library(raster)
library(ggplot2)
library(stringr)


bbox <- st_bbox(shp2_oslo)

# Create a grid with cells of 10m x 10m
grid_10m <- st_make_grid(shp2_oslo, cellsize = c(10, 10), what = "polygons")

# Convert the grid polygons to the same CRS as your occurrence data
grid_10m <- st_transform(grid_10m, st_crs(intersect3_oslo))

grid_10m <- st_as_sf(grid_1m)

# Perform spatial join to count occurrences per grid cell
grid_with_counts <- st_join(grid_10m, intersect3_oslo, left = FALSE)

# Aggregate counts by grid cell
grid_counts <- as.data.frame(table(grid_with_counts$geometry))

# Rename columns for clarity
colnames(grid_counts) <- c("grid_cell", "occurrence_count")


oslo_map_with_grid <- ggplot() +
  geom_sf(data = shp2_oslo, color = "gray30", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_oslo, aes(color = occurrences), size = 1.5, fill = NA) +
  scale_fill_gradient(low = "blue", high = "red") +
  scale_color_gradient(low = "blue", high = "red") +  # Adding color scale for points
  ggtitle("Oslo") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5),  # Center the title text
        panel.grid.major = element_line(color = "black", linewidth = 0.1),
        panel.background = element_rect(fill = NA),
        panel.ontop = TRUE
  )

print(oslo_map_with_grid)

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% DEPTH

map_occ_joined_clip3 <- map_occ_joined_clip1 %>%
  group_by(FYLKESNAVN, originalScientificName, depth) %>%
  summarize(occurrences = n())
View(map_occ_joined_clip3)

intersect4 <- st_intersection(map_occ_joined_clip3, shp2)

# Plot the depth data for the occurrences
depth <- ggplot() +
  geom_sf(data = shp2) +
  geom_sf(data = intersect4, aes(color = depth)) +
  scale_fill_gradient(low = "orange", high = "blue") +
  scale_color_gradient(low = "orange", high = "blue") +  # Adding color scale for points
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(depth)


######################### Checks & Notes ##################################


#ADD HOW THE CORAL MPAS ARENT ALL GEOGRAPHICALLY DEFINE AS ACTUAL MPAS

# Notes from 30.04
# Continue writing (articles that I found to read are in Thesis)
# Species that are indicative of a habitat type.
# Grid the county water and then use red green to mark what is there
# Take into account
# -occurrences interesting taxa or taxa indicative of a habitat
# -habitat data (Mareano)
# What basis do we have to design an mpa network from scratch. How much data is there and how is is distributed spatially.
# Another use metric:
#  Amount of water is being used ? (Bottom trawling, etc)
# Or use a coastline by drawing a linear line
