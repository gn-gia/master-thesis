# setwd("C:/Users/gngia/OneDrive/Documents/new obis")

install.pacakges("dplyr")
install.pacakges("robis")
install.pacakges("ggplot2")
install.pacakges("sf")
install.pacakges("worrms")
install.packages("remotes")
  remotes::install_github("IUCNN/IUCNN") # maybe not using this or rredlist
install.packages("rredlist")
install.pacakges("patchwork")
install.packages("formattable")
install.packages("kableExtra")

# Pacakge citations
citation(package = 'worrms')
citation("IUCNN")

# Occurrence Data: WKT string delimits polygon excluding Svalbard and Jan Mayen; Norway = 179 (Accessed 23.02.2024)
library("dplyr")
library("ggplot2")
library("robis")
o <- occurrence(areaid = "179", mof = TRUE, geometry = "POLYGON ((34.4004 70.2535, 30.5332 71.2047, 26.5254 71.5416, 22.1660 71.2500,
           19.5645 70.7695, 16.5410 70.1344, 13.4473 69.0560, 11.1973 67.7361, 12.5332 67.3060, 
           11.4082 66.3939, 9.8613 65.4765, 8.4551 64.7666, 6.9785 63.9451, 5.0098 62.9072,
           3.5332 61.9968, 3.5332 58.3279, 7.2598 57.2790, 11.0567 58.4017, 12.4629 59.0948, 11.3379 60.6473,
           8.6660 60.5783, 8.3145 62.2924, 16.3301 65.6220, 17.2442 67.6293, 20.1973 68.7523,
           23.9238 69.6998, 26.5254 70.1344, 29.5488 69.5284, 32.2910 69.4051, 34.4004 70.2535))")

unique(o$kingdom)

# Filter rows based on the specified conditions
filtered_data <- o %>%
  filter(kingdom %in% c("Animalia", "Plantae", "Chromista", NA))
View(filtered_data)

# Plot filtered data
library("dplyr")
library("robis")
library("maps")
library("ggplot2")
map_ggplot(filtered_data, color = "blue")

# Transform to sf object and set crs (EPSG:4326, WGS84)
library("sf")
occ_sf <- st_as_sf(filtered_data, coords = c("decimalLongitude", "decimalLatitude"))
occ_sf <- st_set_crs(occ_sf, "EPSG:4326")
print(occ_sf1 <- st_crs(occ_sf))
class(occ_sf)

# Read the shapefile into an sf object and set crs (EPSG:4326, WGS84)
library(sf)
shp <- st_read("C:/Users/gngia/OneDrive/Documents/new obis/GIS/Kommuner_Fylker_Intersect.shp", stringsAsFactors=FALSE)
shp <- st_transform(shp, crs = "EPSG:4326")
print(shp1 <- st_crs(shp))
View(shp)
class(shp) # Shape_Area is in meters

# Plot shapefile with occurrence data
library(sf)
library(ggplot2)
ggplot() +
  geom_sf(data = shp) +
  geom_sf(data = occ_sf, color = "green", size = 1) +
  theme_bw()

# Read the shapefile into an sf object and set crs (EPSG:4326, WGS84)
# Shapefile clip with county, municipality, and is only territorial waters
library("ggplot2")
library(sf)
shp2 <- st_read("C:/Users/gngia/OneDrive/Documents/new obis/GIS/Kommuner_Fylker_TerrVann_Clip.shp", stringsAsFactors=FALSE)
shp2 <- st_transform(shp2, crs = "EPSG:4326")
print(shp3 <- st_crs(shp2))
class(shp2)

# Plot shapefile2 with occurrence data
ggplot() +
  geom_sf(data = shp2) +
  geom_sf(data = occ_sf, color = "pink", size = 1) +
  theme_bw()

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# Perform a spatial join
library(sf)
map_occ_joined_clip1 <- st_join(occ_sf, shp2)
class(map_occ_joined_clip1)
View(map_occ_joined_clip1)

# Count the number of occurrences of each species within each county
map_occ__with_clip1 <- map_occ_joined_clip1 %>%
  group_by(FYLKESNAVN) %>%
  summarize(species_count = n_distinct(originalScientificName)) #I dont understand why this doesnt show species_count in the table / how map_occ_joined_clip2 has occurrences
View(map_occ_joined_clip1)

map_occ_joined_clip2 <- map_occ_joined_clip1 %>%
  group_by(FYLKESNAVN, KOMMUNENAV, aphiaID, originalScientificName, family, class, phylum, kingdom, Shape_Area) %>%
  summarize(occurrences = n())
View(map_occ_joined_clip2)

# Plot the join
library(sf)
library(ggplot2)
ggplot() +
  geom_sf(data = shp) +
  geom_sf(data = shp2) +
  geom_sf(data = map_occ_joined_clip2, aes(color = occurrences), size = 0.25) +
  theme_bw() #map_occ_joined_clip2 extends beyond shp2


#Intersect joined data with shp2 (leaves only occurrences within 12nm of the coast)
intersect3 <- st_intersection(map_occ_joined_clip2, shp2)
View(intersect3)
class(intersect3) # sf, tbl_df, tbl, data.frame

# Plot the intersection 
intersect3_plot <- ggplot() +
  geom_sf(data = shp) +
  geom_sf(data = shp2, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect3, aes(color = occurrences), size = 0.75, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +
  geom_text(data = centroid_data3, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") + #trying to figure out why some of the locations of high density aren't showing up
  theme_bw()

print(intersect3_plot)

# Unicode <- https://symbl.cc/en/unicode-table/#latin-1-supplement
unique(intersect3$FYLKESNAVN)
#st_centroid returns the geometric center for a geometry

####################### TROMS #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_troms <- shp2[shp2$FYLKESNAVN == "\"Troms - Romsa - Tromssa\"", ]
intersect3_troms <- intersect3 %>%
  filter(FYLKESNAVN == "\"Troms - Romsa - Tromssa\"",)

# Extract x and y coordinates from geometry column
centroid_data1 <- st_centroid(shp2_troms)
centroid_data1 <- cbind(centroid_data1, st_coordinates(centroid_data1))

# Plot with labels
troms_map <-ggplot() +
  geom_sf(data = shp2_troms, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_troms, aes(color = occurrences), size = 0.75, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Troms") +
  geom_text(data = centroid_data1, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(troms_map)

####################### AKERSHUS #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_akershus <- shp2[shp2$FYLKESNAVN == "Akershus", ]
intersect3_akershus <- intersect3 %>%
  filter(FYLKESNAVN == "Akershus",)

# Extract x and y coordinates from geometry column
centroid_data2 <- st_centroid(shp2_akershus)
centroid_data2 <- cbind(centroid_data2, st_coordinates(centroid_data2))

# Plot with labels
akershus_map <- ggplot() +
  geom_sf(data = shp2_akershus, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_akershus, aes(color = occurrences), size = 0.75, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Akershus") +
  geom_text(data = centroid_data2, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(akershus_map)

####################### MØRE OG ROMSDAL #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_moere <- shp2[shp2$FYLKESNAVN == "\"M\u00F8re og Romsdal\"", ]
intersect3_moere <- intersect3 %>%
  filter(FYLKESNAVN == "\"M\u00F8re og Romsdal\"",)

# Extract x and y coordinates from geometry column
centroid_data3 <- st_centroid(shp2_moere)
centroid_data3 <- cbind(centroid_data3, st_coordinates(centroid_data3))

# Plot with labels
moere_map <- ggplot() +
  geom_sf(data = shp2_moere, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_moere, aes(color = occurrences), size = 5, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("M\u00F8re og Romsdal") +
  geom_text(data = centroid_data3, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw()+
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(moere_map)

####################### ØSTFOLD #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_oestfold <- shp2[shp2$FYLKESNAVN == "\u00D8stfold", ]
intersect3_oestfold <- intersect3 %>%
  filter(FYLKESNAVN == "\u00D8stfold",)

# Extract x and y coordinates from geometry column
centroid_data4 <- st_centroid(shp2_oestfold)
centroid_data4 <- cbind(centroid_data4, st_coordinates(centroid_data4))

oestfold_map <- ggplot() +
  geom_sf(data = shp2_oestfold, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_oestfold, aes(color = occurrences), size = 0.75, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +
  ggtitle("\u00D8stfold") +
  geom_text(data = centroid_data4, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(oestfold_map)

####################### VESTLAND #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_vestland <- shp2[shp2$FYLKESNAVN == "Vestland", ]
intersect3_vestland <- intersect3 %>%
  filter(FYLKESNAVN == "Vestland",)

# Extract x and y coordinates from geometry column
centroid_data5 <- st_centroid(shp2_vestland)
centroid_data5 <- cbind(centroid_data5, st_coordinates(centroid_data5))

# Plot with labels
vestland_map <- ggplot() +
  geom_sf(data = shp2_vestland, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_vestland, aes(color = occurrences), size = 0.75, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Vestland") +
  geom_text(data = centroid_data5, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(vestland_map)

####################### NORDLAND #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_nordland <- shp2[shp2$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\"" , ]
intersect3_nordland <- intersect3 %>% filter(FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\"" , )

# Extract centroid coordinates from geometry column
centroid_data6 <- st_centroid(shp2_nordland)
centroid_data6 <- cbind(centroid_data6, st_coordinates(centroid_data6))

# Plot with labels
nordland_map <- ggplot() +
  geom_sf(data = shp2_nordland, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_nordland, aes(color = occurrences), size = 0.75, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Nordland") +
  geom_text(data = centroid_data6, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(nordland_map)

####################### ROGALAND #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_rogaland <- shp2[shp2$FYLKESNAVN == "Rogaland", ]
intersect3_rogaland <- intersect3 %>%
  filter(FYLKESNAVN == "Rogaland",)

# Extract x and y coordinates from geometry column
centroid_data7 <- st_centroid(shp2_rogaland)
centroid_data7 <- cbind(centroid_data7, st_coordinates(centroid_data7))

# Plot with labels
rogaland_map <- ggplot() +
  geom_sf(data = shp2_rogaland, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_rogaland, aes(color = occurrences), size = 0.75, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Rogaland") +
  geom_text(data = centroid_data7, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(rogaland_map)

####################### TRØNDELAG #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_troendelag <- shp2[shp2$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\"" , ]
intersect3_troendelag <- intersect3 %>%
  filter(FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\"")

# Extract x and y coordinates from geometry column
centroid_data8 <- st_centroid(shp2_troendelag)
centroid_data8 <- cbind(centroid_data8, st_coordinates(centroid_data8))

# Plot with labels
troendelag_map <- ggplot() +
  geom_sf(data = shp2_troendelag, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_troendelag, aes(color = occurrences), size = 0.75, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Tr\u00F8ndelag") +
  geom_text(data = centroid_data8, aes(label = KOMMUNENAV, x = X, y = Y), size = 2.5, color = "black") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(troendelag_map)

####################### FINNMARK #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_finnmark <- shp2[shp2$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\"", ]
intersect3_finnmark <- intersect3 %>%
  filter(FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\"",)

# Extract x and y coordinates from geometry column
centroid_data9 <- st_centroid(shp2_finnmark)
centroid_data9 <- cbind(centroid_data9, st_coordinates(centroid_data9))

# Plot with labels
finnmark_map <- ggplot() +
  geom_sf(data = shp2_finnmark, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_finnmark, aes(color = occurrences), size = 0.75, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Finnmark") +
  geom_text(data = centroid_data9, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(finnmark_map)

####################### AGDER #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_agder <- shp2[shp2$FYLKESNAVN == "Agder", ]
intersect3_agder <- intersect3 %>%
  filter(FYLKESNAVN == "Agder",)

# Extract x and y coordinates from geometry column
centroid_data10 <- st_centroid(shp2_agder)
centroid_data10 <- cbind(centroid_data10, st_coordinates(centroid_data10))

# Plot with labels
agder_map <- ggplot() +
  geom_sf(data = shp2_agder, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_agder, aes(color = occurrences), size = 0.75, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Agder") +
  geom_text(data = centroid_data10, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(agder_map)

####################### TELEMARK #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_telemark <- shp2[shp2$FYLKESNAVN == "Telemark", ]
intersect3_telemark <- intersect3 %>%
  filter(FYLKESNAVN == "Telemark",)

# Extract x and y coordinates from geometry column
centroid_data11 <- st_centroid(shp2_telemark)
centroid_data11 <- cbind(centroid_data11, st_coordinates(centroid_data11))

# Plot with labels
telemark_map <- ggplot() +
  geom_sf(data = shp2_telemark, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_telemark, aes(color = occurrences), size = 0.75, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Telemark") +
  geom_text(data = centroid_data11, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(telemark_map)

####################### VESTFOLD #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_vestfold <- shp2[shp2$FYLKESNAVN == "Vestfold", ]
intersect3_vestfold <- intersect3 %>%
  filter(FYLKESNAVN == "Vestfold",)

# Extract x and y coordinates from geometry column
centroid_data12 <- st_centroid(shp2_vestfold)
centroid_data12 <- cbind(centroid_data12, st_coordinates(centroid_data12))

# Plot with labels
vestfold_map <- ggplot() +
  geom_sf(data = shp2_vestfold, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_vestfold, aes(color = occurrences), size = 0.75, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Vestfold") +
  geom_text(data = centroid_data12, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(vestfold_map)

####################### BUSKERUD #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_buskerud <- shp2[shp2$FYLKESNAVN == "Buskerud", ]
intersect3_buskerud <- intersect3 %>%
  filter(FYLKESNAVN == "Buskerud",)

# Extract x and y coordinates from geometry column
centroid_data13 <- st_centroid(shp2_buskerud)
centroid_data13 <- cbind(centroid_data13, st_coordinates(centroid_data13))

# Plot with labels
buskerud_map <- ggplot() +
  geom_sf(data = shp2_buskerud, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_buskerud, aes(color = occurrences), size = 0.75, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Buskerud") +
  geom_text(data = centroid_data13, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(buskerud_map)

####################### OSLO #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_oslo <- shp2[shp2$FYLKESNAVN == "Oslo", ]
intersect3_oslo <- intersect3 %>%
  filter(FYLKESNAVN == "Oslo",)

# Extract x and y coordinates from geometry column
centroid_data14 <- st_centroid(shp2_oslo)
centroid_data14 <- cbind(centroid_data14, st_coordinates(centroid_data14))

# Plot with labels
oslo_map <- ggplot() +
  geom_sf(data = shp2_oslo, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect3_oslo, aes(color = occurrences), size = 0.75, fill = NA) +
  scale_fill_gradient(low = "green", high = "red") +
  scale_color_gradient(low = "green", high = "red") +  # Adding color scale for points
  ggtitle("Oslo") +
  geom_text(data = centroid_data14, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw() +
  theme(axis.title.x = element_blank(),  # Remove x-axis title
        axis.title.y = element_blank(),  # Remove y-axis title
        plot.title.position = "plot",  # Position the title centered above the plot
        plot.title = element_text(hjust = 0.5))  # Center the title text

print(oslo_map)

################################### STATISTICS #######################################################
library(ggplot2)
library(patchwork)

# Set common color scale for species occurrences
common_limits <- c(0, 16800)

# Arrange maps into one composite plot
all_county_maps <- (
  finnmark_map + 
    troms_map + 
    nordland_map + 
    troendelag_map + 
    moere_map + 
    vestland_map + 
    rogaland_map + 
    agder_map + 
    telemark_map + 
    buskerud_map + 
    vestfold_map + 
    akershus_map + 
    oslo_map + 
    oestfold_map
) + plot_layout(ncol = 4, byrow = TRUE)  # Adjust the number of columns based on the total number of maps

# Add titles for each county map and overarching title
# Define the size of each map
map_width <- 8
map_height <- 8

# Update the plot_annotation to set appropriate map sizes
all_county_maps <- all_county_maps +
  plot_annotation(
    title = "Composite Map of Norwegian Counties",
    subtitle = c("Finnmark", "Troms", "Nordland", "Tr\u00F8ndelag", "M\u00F8re og Romsdal", "Vestland", 
                 "Rogaland", "Agder", "Telemark", "Buskerud", "Vestfold", "Akershus", 
                 "Oslo", "Østfold"),
    theme = theme(plot.title = element_text(size = 16), plot.subtitle = element_text(size = 10))
  ) +
  theme(plot.margin = unit(c(2, 2, 2, 2), "cm"), 
        aspect.ratio = map_height / map_width)  # Set aspect ratio
print(all_county_maps)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5

library(ggplot2)
library(gridExtra)

# Define the size of each map
# Define the size of each map
map_width <- 4
map_height <- 4

# List of all county names
county_names <- c("Finnmark", "Troms", "Nordland", "Trøndelag", "Møre og Romsdal", "Vestland", 
                  "Rogaland", "Agder", "Telemark", "Buskerud", "Vestfold", "Akershus", 
                  "Oslo", "Østfold")

# Define the layout for the composite plot
layout_matrix <- matrix(1:length(county_names), nrow = 2, byrow = TRUE)

# Generate individual map plots and store them in the list
map_plots <- list()
for (i in 1:length(county_names)) {
  county_plot <- all_county_maps[[i]]  # Extract the individual ggplot plot from patchwork
  
  # Modify the individual plot as needed
  county_plot <- county_plot +
    theme(plot.title = element_text(size = 16, vjust = 2),  # Adjust vjust parameter to move the title upwards
          plot.subtitle = element_text(size = 10),
          plot.margin = unit(c(1, 1, 1.5, 1), "cm")) +  # Increase the top margin
    theme_void() +
    theme(aspect.ratio = map_height / map_width)  # Set fixed dimensions for each map
  
  map_plots[[i]] <- county_plot
}

# Combine individual map plots into a composite plot
composite_plot <- NULL
for (i in 1:length(county_names)) {
  if (is.null(composite_plot)) {
    composite_plot <- map_plots[[i]]
  } else {
    composite_plot <- composite_plot + map_plots[[i]]
  }
}

# Add overall title and subtitle to the composite plot
composite_plot <- composite_plot +
  ggplot2::labs(title = "Composite Map of Norwegian Counties" +
  theme(plot.title = element_text(hjust = 0.5)))  # Center the title

# Print the composite plot
print(composite_plot)

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% WoRMS
library(worrms) # (https://www.marinespecies.org/)

#synonyms <- wm_synonyms_(id = c(aphiaIDs)) # Synonyms, do any overlap with the scientific name given with AphiaID
#print(synonyms)

# Summarizing by classification
aphiaIDs <- unique(intersect3$aphiaID)
print(aphiaIDs)

aphia_classification <- wm_classification_(id = c(aphiaIDs))
print(aphia_classification)

class_taxa <- aphia_classification %>%
  filter(rank == "Class") %>%
  group_by(scientificname, AphiaID) %>%
  summarize(occurrences = n())
print(class_taxa)

kingdom_taxa <- aphia_classification %>%
  filter(rank == "Kingdom") %>%
  group_by(scientificname, AphiaID) %>%
  summarize(occurrences = n())
print(kingdom_taxa)

unique(intersect3$class)
taxa_by_class <- intersect3 %>%
  group_by(class) %>%
  summarize(total_occurrences = sum(occurrences, na.rm = TRUE))
print(taxa_by_class)

# Calculate the ratio of each class versus the total sum of occurrences
total_sum_by_class <- sum(taxa_by_class$total_occurrences) # Total sum of occurrences

percentage_occ_per_class <- taxa_by_class %>%
  mutate(percentage = sprintf("%.5f%%", (total_occurrences / total_sum_by_class) * 100))
print(percentage_occ_per_class) # percentage column says what percent of the total is each class; overwhelming maj is Aves
sum(percentage_occ_per_class$total_occurrences)

# Returns the data into a format for latex, using kableExtra
library(kableExtra)
kable(percentage_occ_per_class, "latex", file = "Percentage_occ_per_class.tex")


#taxa_classification <- intersect3 %>%
#  filter(rank %in% c("kingdom", "phylum", "class", "order", "family", "genus", "sp")) %>%
#  group_by(rank, scientificname) %>%
#  summarize(occurrences = sum(occurrences))
#print(taxa_classification)

#WHAT I WANT TO DO IS RUN THE APHIAID FOR SPECIES NAMES AND THEN RUN THAT LIST USING THE IUCN PACAKGE AGAINST THE IUCN RED LIST DATA TO FIND ANY ENDANGERED SPECIES
aphia_names <- wm_id2name_(aphiaIDs)
print(aphia_names)
library(rredlist) #I need to generate a token to use the IUCN API but the website is giving a 404 error, I emailed them about it 16.04.2024

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% FIND NA VALUES

# Print NA/missing information of intersect3
indices_with_na <- which(colSums(is.na(intersect3)) > 0)
print(indices_with_na) #family; class; phylum; kingdom; REF

# Print the number of NA values in each column
for (i in indices_with_na) {
  cat("Column", i, "has", sum(is.na(intersect3[, i])), "NA values.\n")
}

#Column 5 has 1941 NA values. - Family
#Column 6 has 644 NA values. - Class
#Column 7 has 19 NA values. - Phylum
#Column 8 has 1 NA values. - Kingdom
#Column 21 has 18479 NA values. - Ref

# Print NA/missing information of intersect3
indices_with_na <- which(rowSums(is.na(intersect3)) > 0)
print(indices_with_na)

# Print the number of NA values in each row
for (i in indices_with_na) {
  cat("Row", i, "has", sum(is.na(intersect3[i, ])), "NA values.\n")
}

any(is.na(intersect3$originalScientificName)) # FALSE

# Find NA values in intersect3
# Remove rows with NA values
intersect3_no_na <- intersect3[, !names(intersect3) %in% c("REF")]

# Find rows with NA values by comparing row counts
rows_with_na <- nrow(intersect3) - nrow(intersect3_no_na)
print(rows_with_na)

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# Count the number of occurrences of each species within each county
#group_sum <- map_occ_joined_clip1 %>%
#  group_by(FYLKESNAVN, KOMMUNENAV, genus, aphiaID) %>%
#  summarize(occurrences = n())
#View(group_sum)

# % of occurrences for each county compared to sum of total occurrences
occurence_ratios <- c(
  (sum(intersect3_finnmark$occurrences) / sum(intersect3$occurrences)), #7.96624082
  (sum(intersect3_moere$occurrences) / sum(intersect3$occurrences)), #11.92463115
  (sum(intersect3_nordland$occurrences) / sum(intersect3$occurrences)), #14.35317703
  (sum(intersect3_troms$occurrences) / sum(intersect3$occurrences)), #6.64739124
  (sum(intersect3_troendelag$occurrences) / sum(intersect3$occurrences)), #17.71331004
  (sum(intersect3_agder$occurrences) / sum(intersect3$occurrences)), #13.87778082
  (sum(intersect3_akershus$occurrences) / sum(intersect3$occurrences)), #1.17467851
  (sum(intersect3_buskerud$occurrences) / sum(intersect3$occurrences)), #0.01026035
  (sum(intersect3_oslo$occurrences) / sum(intersect3$occurrences)), #0.13759392 
  (sum(intersect3_rogaland$occurrences) / sum(intersect3$occurrences)), #8.46557784
  (sum(intersect3_telemark$occurrences) / sum(intersect3$occurrences)), #3.50351483
  (sum(intersect3_vestfold$occurrences) / sum(intersect3$occurrences)), #2.90210048
  (sum(intersect3_vestland$occurrences) / sum(intersect3$occurrences)), #9.15933534
  (sum(intersect3_oestfold$occurrences) / sum(intersect3$occurrences)) #2.16440764
  )
print(ratios)

# Relative shape area comparisons so that the percentage of occ data can be compared to size
#Shape Areas are connected with KOMMUNENAV
  areas <- intersect3 %>%
  group_by(FYLKESNAVN, Shape_Area, KOMMUNENAV,) %>%
  summarize(occurrences = sum(occurrences))
View(areas)

# Sum all municipalities and municipality shape areas to each county based on "areas"
sum_areas <- areas %>%
  group_by(FYLKESNAVN) %>%
  summarize(
    Total_Shape_Area = sum(Shape_Area)
  )
print(sum_areas)

# Summ all municipality water areas to create total area of water
total_area <- sum(sum_areas$Total_Shape_Area)
print(total_area) #153 623 111 806 meters sq.
area_sqkm <- sum_areas %>%
  mutate(area_sqkm = Total_Shape_Area / 1e6)
print(area_sqkm)

# Calculate the proportion relative to the total area
size_ratios <- c(
                (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\""] / total_area) , #17.26945060
                (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"M\u00F8re og Romsdal\""] / total_area), #7.80632499
                (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\""] / total_area), #28.78974072
                (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Troms - Romsa - Tromssa\""] / total_area), #10.64847636
                (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\""] / total_area), #12.15463663
                (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Agder"] / total_area), #4.40917097
                (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Akershus"] / total_area), #0.20498357
                (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Buskerud"] / total_area), #0.02809141
                (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Oslo"] / total_area), #0.01615758
                (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Rogaland"] / total_area), #4.92925757
                (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Telemark"] / total_area), #0.61120755
                (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Vestfold"] / total_area), #1.25236596
                (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "Vestland"] / total_area), #11.27418401
                (sum_areas$Total_Shape_Area[sum_areas$FYLKESNAVN == "\u00D8stfold"] / total_area) #0.60595208
)                 
print(size_ratios)

# library(formattable)

# Format the ratios as percentages
occurrence_percentage <- percent(occurence_ratios, 2)
print(occurrence_percentage)
size_percentage <- percent(size_ratios, 2)
print(size_percentage)

by_county_occ_sum <- intersect3 %>%
  group_by(FYLKESNAVN) %>%
  summarize(occurrences = sum(occurrences))
print(by_county_occ_sum)

# Create a summary table 
summary_table <- data.frame(
  FYLKESNAVN = sum_areas$FYLKESNAVN,
  area_sqkm = (area_sqkm$area_sqkm), # Using area_sqkm directly
  size_percentage = size_percentage, # Include the size percentage directly
  Total_Occurrences = (by_county_occ_sum$occurrences),
  occurrence_percentage = occurrence_percentage # Include the occurrence percentage directly
)
print(summary_table)

# Returns the data into a format for latex, using kableExtra
library(kableExtra)
kable(summary_table, "latex", file = "summary_table.tex")

######################### Checks & Notes ##################################
sum(map_occ_joined_clip2$occurrences) #910 008 
sum(intersect3$occurrences) #380 104  with 0 in class == Aves
sum(areas$occurrences) #380 104
sum(by_county_occ_sum$occurrences) #380 104

sum(
  (intersect3_finnmark$occurrences),
  (intersect3_moere$occurrences),
  (intersect3_nordland$occurrences),
  (intersect3_troms$occurrences),
  (intersect3_troendelag$occurrences),
  (intersect3_agder$occurrences),
  (intersect3_akershus$occurrences),
  (intersect3_buskerud$occurrences),
  (intersect3_oslo$occurrences), 
  (intersect3_rogaland$occurrences),
  (intersect3_telemark$occurrences),
  (intersect3_vestfold$occurrences),
  (intersect3_vestland$occurrences),
  (intersect3_oestfold$occurrences)
) #380 104

sum(summary_table$Total_Occurrences.occurrences) #380 104

----------------------------------------------------------
any(is.na(intersect3$FYLKESNAVN))
any(is.na(intersect3$occurrences))
indices_with_na <- which(colSums(is.na(intersect3)) > 0)
print(indices_with_na)

any(is.na(intersect3$aphiaID)) #False
any(is.na(class_taxa$scientificname)) #False
any(is.na(occ_sf$class)) # True
any(is.na(occ_sf$phylum)) #True
any(is.na(occ_sf$genus)) #True 
any(is.na(map_occ_joined_clip1$originalScientificName))  #False

any(is.na(intersect3$phylum))

length(sum_areas$FYLKESNAVN)
length(by_county_occ_sum)

