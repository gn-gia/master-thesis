# setwd("C:/Users/gngia/OneDrive/Documents/new obis")

# Install robis package and run with 179=Norway and polygon excludes Svalbard and some outer marine records/areas (records from 23.02.2024)
#CHECK IF MOF IS EVEN RUNNING 
library("dplyr")
library("ggplot2")
library("robis")
o <- occurrence(areaid = "179", mof = TRUE, geometry = "POLYGON ((34.4004 70.2535, 30.5332 71.2047, 26.5254 71.5416, 22.1660 71.2500,
           19.5645 70.7695, 16.5410 70.1344, 13.4473 69.0560, 11.1973 67.7361, 12.5332 67.3060, 
           11.4082 66.3939, 9.8613 65.4765, 8.4551 64.7666, 6.9785 63.9451, 5.0098 62.9072,
           3.5332 61.9968, 3.5332 58.3279, 7.2598 57.2790, 11.0567 58.4017, 12.4629 59.0948, 11.3379 60.6473,
           8.6660 60.5783, 8.3145 62.2924, 16.3301 65.6220, 17.2442 67.6293, 20.1973 68.7523,
           23.9238 69.6998, 26.5254 70.1344, 29.5488 69.5284, 32.2910 69.4051, 34.4004 70.2535))")
#unique(o$kingdom)
#View(o)

# Filter rows based on the specified conditions
filtered_data <- o %>%
  filter(kingdom %in% c("Animalia", "Plantae", "Chromista", NA))
#unique(filtered_data$kingdom)
View(filtered_data)

# Plot map
library("dplyr")
library("robis")
library("maps")
#library("ggplot2")
map_ggplot(filtered_data, color = "blue")


#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
# Transform to an sf object and set crs
library("sf")
occ_sf <- st_as_sf(filtered_data, coords = c("decimalLongitude", "decimalLatitude"))
occ_sf <- st_set_crs(occ_sf, "EPSG:4326")
print(occ_sf1 <- st_crs(occ_sf))


# Read the shapefile into an sf object
library(sf)
shp <- st_read("C:/Users/gngia/OneDrive/Documents/new obis/GIS/Kommuner_Fylker_Intersect.shp", stringsAsFactors=FALSE)
#View(shp)
shp <- st_transform(shp, crs = "EPSG:4326")
print(shp1 <- st_crs(shp))

class(shp)
class(occ_sf)

#idk if it works for graphs, but i might also have to run maps back to back to back to have them show all at once
#par(mfrow=c(2,2))

# Plot the shapefile and occurrence data
library(sf)
library(ggplot2)
ggplot() +
  geom_sf(data = shp) +
  geom_sf(data = occ_sf, color = "green", size = 1) +
  theme_bw()

unique(filtered_data$country)

# Plot the shapefile2 and occurrence data
library(sf)
library(ggplot2)
ggplot() +
  geom_sf(data = shp) +
  geom_sf(data = occ_sf, color = "green", size = 1) +
  theme_bw()

#unique(filtered_data$country)

# Perform a spatial join
library(sf)
map_occ_joined <- st_join(occ_sf, shp)
class(map_occ_joined)

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# Clipped shapefile with county, municipality, and clipped to be only territorial waters and change crs
library("ggplot2")
library(sf)
shp2 <- st_read("C:/Users/gngia/OneDrive/Documents/new obis/GIS/Kommuner_Fylker_TerrVann_Clip.shp", stringsAsFactors=FALSE)
shp2 <- st_transform(shp2, crs = "EPSG:4326")
print(shp3 <- st_crs(shp2))
class(shp2)
#view(shp)

#Plot with occ_sf
ggplot() +
  geom_sf(data = shp2) +
  geom_sf(data = occ_sf, color = "pink", size = 1) +
  theme_bw()

# Perform a spatial join
library(sf)
map_occ_joined_clip1 <- st_join(occ_sf, shp2)
class(map_occ_joined_clip1)


map_occ__with_clip1 <- map_occ_joined_clip %>%
  group_by(FYLKESNAVN) %>%
  summarize(species_count = n_distinct(originalScientificName))
View(map_occ_joined_clip1)

# Count the number of occurrences of each species within each county
 map_occ_joined_clip2 <- map_occ_joined_clip1 %>%
  group_by(KOMMUNENAV, genus, aphiaID) %>%
  summarize(occurrences = n())
View(map_occ_joined_clip2)

unique(map_occ_joined_clip2$KOMMUNENAV)

# Plot the join
library(sf)
library(ggplot2)
ggplot() +
  geom_sf(data = shp) +
  geom_sf(data = shp2) +
  geom_sf(data = map_occ_joined_clip2, aes(color = occurrences), size = 0.25) +
  theme_classic()


plot(shp2)

#Intersect joined data with shp2
intersect2 <- st_intersection(map_occ_joined_clip2, shp2)
View(intersect2)

#filter table by Herøy and look at the weird thing going on there
unique(intersect2$KOMMUNENAV)
unique(intersect2$genus)


# map_occ_joined_clip2 extends beyond shp2
ggplot() +
  geom_sf(data = shp) +
  geom_sf(data = shp2, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = map_occ_joined_clip2, aes(color = occurrences), size = 0.2)+
  theme_bw()

# intersect2 fits within shp2
ggplot() +
  geom_sf(data = shp) +
  geom_sf(data = shp2, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect2, aes(color = occurrences), size = 0.2)+
  theme_bw()

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Encoding("")
options(encoding = "UTF-8")
# https://symbl.cc/en/unicode-table/#latin-1-supplement

# Define and perform replacements using dplyr
library(dplyr)
unique(intersect2$FYLKESNAVN)

####################### TROMS #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_troms <- shp2[shp2$FYLKESNAVN == "\"Troms - Romsa - Tromssa\"", ]
intersect2_troms <- intersect2 %>%
  filter(FYLKESNAVN == "\"Troms - Romsa - Tromssa\"",)

# Extract x and y coordinates from geometry column
centroid_data1 <- st_centroid(shp2_troms)
centroid_data1 <- cbind(centroid_data1, st_coordinates(centroid_data1))

# Plotting code with labels
ggplot() +
  geom_sf(data = shp2_troms, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect2_troms, aes(color = occurrences), size = 0.2, fill = NA) +
  geom_text(data = centroid_data1, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw()

####################### AKERSHUS #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_akershus <- shp2[shp2$FYLKESNAVN == "Akershus", ]
intersect2_akershus <- intersect2 %>%
  filter(FYLKESNAVN == "Akershus",)

# Extract x and y coordinates from geometry column
centroid_data2 <- st_centroid(shp2_akershus)
centroid_data2 <- cbind(centroid_data2, st_coordinates(centroid_data2))

# Plotting code with labels
ggplot() +
  geom_sf(data = shp2_akershus, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect2_akershus, aes(color = occurrences), size = 0.2, fill = NA) +
  geom_text(data = centroid_data2, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw()

####################### MØRE OG ROMSDAL #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_moere <- shp2[shp2$FYLKESNAVN == "\"M\u00F8re og Romsdal\"", ]
intersect2_moere <- intersect2 %>%
  filter(FYLKESNAVN == "\"M\u00F8re og Romsdal\"",)

# Extract x and y coordinates from geometry column
centroid_data3 <- st_centroid(shp2_moere)
centroid_data3 <- cbind(centroid_data3, st_coordinates(centroid_data3))

# Plotting code with labels
ggplot() +
  geom_sf(data = shp2_moere, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect2_moere, aes(color = occurrences), size = 0.2, fill = NA) +
  geom_text(data = centroid_data3, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw()

####################### ØSTFOLD #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_oestfold <- shp2[shp2$FYLKESNAVN == "\u00D8stfold", ]
intersect2_oestfold <- intersect2 %>%
  filter(FYLKESNAVN == "\u00D8stfold",)

# Extract x and y coordinates from geometry column
centroid_data4 <- st_centroid(shp2_oestfold)
centroid_data4 <- cbind(centroid_data4, st_coordinates(centroid_data4))

# Plotting code with labels
ggplot() +
  geom_sf(data = shp2_oestfold, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect2_oestfold, aes(color = occurrences), size = 0.2, fill = NA) +
  geom_text(data = centroid_data4, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw()

####################### VESTLAND #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_vestland <- shp2[shp2$FYLKESNAVN == "Vestland", ]
intersect2_vestland <- intersect2 %>%
  filter(FYLKESNAVN == "Vestland",)

# Extract x and y coordinates from geometry column
centroid_data5 <- st_centroid(shp2_vestland)
centroid_data5 <- cbind(centroid_data5, st_coordinates(centroid_data5))

# Plotting code with labels
ggplot() +
  geom_sf(data = shp2_vestland, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect2_vestland, aes(color = occurrences), size = 0.2, fill = NA) +
  geom_text(data = centroid_data5, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw()

####################### NORDLAND #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_nordland <- shp2[shp2$FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\"" , ]
intersect2_nordland <- intersect2 %>% filter(FYLKESNAVN == "\"Nordland - Nordl\u00E1nnda\"" , )

# Extract centroid coordinates from geometry column
centroid_data6 <- st_centroid(shp2_nordland)
centroid_data6 <- cbind(centroid_data6, st_coordinates(centroid_data6))

# Plotting code with labels
ggplot() +
  geom_sf(data = shp2_nordland, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect2_nordland, aes(color = occurrences), size = 0.2, fill = NA) +
  geom_text(data = centroid_data6, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw()

####################### ROGALAND #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_rogaland <- shp2[shp2$FYLKESNAVN == "Rogaland", ]
intersect2_rogaland <- intersect2 %>%
  filter(FYLKESNAVN == "Rogaland",)

# Extract x and y coordinates from geometry column
centroid_data7 <- st_centroid(shp2_rogaland)
centroid_data7 <- cbind(centroid_data7, st_coordinates(centroid_data7))

# Plotting code with labels
ggplot() +
  geom_sf(data = shp2_rogaland, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect2_rogaland, aes(color = occurrences), size = 0.2, fill = NA) +
  geom_text(data = centroid_data7, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw()

####################### TRØNDELAG #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_troendelag <- shp2[shp2$FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\"" , ]
intersect2_troendelag <- intersect2 %>%
  filter(FYLKESNAVN == "\"Tr\u00F8ndelag - Tr\u00F6\u00F6ndelage\"")

# Extract x and y coordinates from geometry column
centroid_data8 <- st_centroid(shp2_troendelag)
centroid_data8 <- cbind(centroid_data8, st_coordinates(centroid_data8))

# Plotting code with labels
ggplot() +
  geom_sf(data = shp2_troendelag, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect2_troendelag, aes(color = occurrences), size = 0.2, fill = NA) +
  geom_text(data = centroid_data8, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw()

####################### FINNMARK #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_finnmark <- shp2[shp2$FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\"", ]
intersect2_finnmark <- intersect2 %>%
  filter(FYLKESNAVN == "\"Finnmark - Finnm\u00E1rku - Finmarkku\"",)

# Extract x and y coordinates from geometry column
centroid_data9 <- st_centroid(shp2_finnmark)
centroid_data9 <- cbind(centroid_data9, st_coordinates(centroid_data9))

# Plotting code with labels
ggplot() +
  geom_sf(data = shp2_finnmark, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect2_finnmark, aes(color = occurrences), size = 0.2, fill = NA) +
  geom_text(data = centroid_data9, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw()

####################### AGDER #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_agder <- shp2[shp2$FYLKESNAVN == "Agder", ]
intersect2_agder <- intersect2 %>%
  filter(FYLKESNAVN == "Agder",)

# Extract x and y coordinates from geometry column
centroid_data10 <- st_centroid(shp2_agder)
centroid_data10 <- cbind(centroid_data10, st_coordinates(centroid_data10))

# Plotting code with labels
ggplot() +
  geom_sf(data = shp2_agder, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect2_agder, aes(color = occurrences), size = 0.2, fill = NA) +
  geom_text(data = centroid_data10, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw()

####################### TELEMARK #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_telemark <- shp2[shp2$FYLKESNAVN == "Telemark", ]
intersect2_telemark <- intersect2 %>%
  filter(FYLKESNAVN == "Telemark",)

# Extract x and y coordinates from geometry column
centroid_data11 <- st_centroid(shp2_telemark)
centroid_data11 <- cbind(centroid_data11, st_coordinates(centroid_data11))

# Plotting code with labels
ggplot() +
  geom_sf(data = shp2_telemark, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect2_telemark, aes(color = occurrences), size = 0.2, fill = NA) +
  geom_text(data = centroid_data11, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw()

####################### VESTFOLD #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_vestfold <- shp2[shp2$FYLKESNAVN == "Vestfold", ]
intersect2_vestfold <- intersect2 %>%
  filter(FYLKESNAVN == "Vestfold",)

# Extract x and y coordinates from geometry column
centroid_data12 <- st_centroid(shp2_vestfold)
centroid_data12 <- cbind(centroid_data12, st_coordinates(centroid_data12))

# Plotting code with labels
ggplot() +
  geom_sf(data = shp2_vestfold, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect2_vestfold, aes(color = occurrences), size = 0.2, fill = NA) +
  geom_text(data = centroid_data12, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw()

####################### BUSKERUD #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_buskerud <- shp2[shp2$FYLKESNAVN == "Buskerud", ]
intersect2_buskerud <- intersect2 %>%
  filter(FYLKESNAVN == "Buskerud",)

# Extract x and y coordinates from geometry column
centroid_data13 <- st_centroid(shp2_buskerud)
centroid_data13 <- cbind(centroid_data13, st_coordinates(centroid_data13))

# Plotting code with labels
ggplot() +
  geom_sf(data = shp2_buskerud, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect2_buskerud, aes(color = occurrences), size = 0.2, fill = NA) +
  geom_text(data = centroid_data13, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw()

####################### OSLO #######################################
# Filter shp2 to include only the geometry for the county of interest
shp2_oslo <- shp2[shp2$FYLKESNAVN == "Oslo", ]
intersect2_oslo <- intersect2 %>%
  filter(FYLKESNAVN == "Oslo",)

# Extract x and y coordinates from geometry column
centroid_data14 <- st_centroid(shp2_oslo)
centroid_data14 <- cbind(centroid_data14, st_coordinates(centroid_data14))

# Plotting code with labels
ggplot() +
  geom_sf(data = shp2_oslo, color = "gold", size = 0.2, fill = NA) +
  geom_sf(data = intersect2_oslo, aes(color = occurrences), size = 0.2, fill = NA) +
  geom_text(data = centroid_data14, aes(label = KOMMUNENAV, x = X, y = Y), size = 3, color = "black") +
  theme_bw()

############################ STATISTICS #######################################################
# Count the number of occurrences of each species within each county
group_sum <- map_occ_joined_clip1 %>%
  group_by(FYLKESNAVN, KOMMUNENAV, genus, aphiaID) %>%
  summarize(occurrences = n())
View(group_sum)



#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
# WORMS
install.packages("worrms")
citation(package = 'worrms')
library(worrms)

aphiaIDs <- unique(group_sum$aphiaID)
print(aphiaIDs)
# It looks like the aphiaID does not give more info on the name but maybe it does for 
# distrubution or something -- moving on for now
wm_distribution <- function(aphiaIDs, `length(aphiaIDs) == 1`) {
  assert(id, c("numeric", "integer"))
  assert_len(id, 1)
  wm_GET(file.path(wm_base(), "AphiaDistributionsByAphiaID", id), ...)
}
wm_id2name(id = 106485)

taxonomic_names <- sapply(aphiaIDs, wm_id2name)
# Print the taxonomic names
print(taxonomic_names)

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# Number of occurrences per county / all occurrences to find % of occurrences for each county


